--FUNCIONES DE TRANSASCCIONES E INSERCION DE LA TABLA TAB_ESTUDIANTE ------------------------------------------------------------------------------------------------------------
--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA ESTUDIANTE
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_ESTUDIANTE(wNOMBRE_ESTUDIANTE TAB_ESTUDIANTE.NOM_ESTUDIANTE%TYPE,
                            wDIRECCION_ESTUDIANTE TAB_ESTUDIANTE.DIR_ESTUDIANTE%TYPE,
                            wTELEFONO_ESTUDIANTE TAB_ESTUDIANTE.TEL_ESTUDIANTE%TYPE,
                            wEMAIL_ESTUDIANTE TAB_ESTUDIANTE.EMAIL_ESTUDIANTE%TYPE,
                            wID_GRUPO_ESTUDIO TAB_ESTUDIANTE.ID_GRUPO_ESTUDIO%TYPE,
                            wID_ESTUDIANTE TAB_ESTUDIANTE.ID_ESTUDIANTE%TYPE,
                            wTIPO_DOCUMENTO TAB_ESTUDIANTE.TIPO_DOCUMENTO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO wNOMBRE_ESTUDIANTE TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        IF LENGTH(wNOMBRE_ESTUDIANTE) < 3 OR wNOMBRE_ESTUDIANTE IS NULL THEN
            RETORNO := 14001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wDIRECCION_ESTUDIANTE TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDIRECCION_ESTUDIANTE) < 3 OR wDIRECCION_ESTUDIANTE IS NULL THEN
            RETORNO := 14002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wTELEFONO_ESTUDIANTE TIENE QUE SER UN NUMERO CELULAR VALIDO COLONIANO
        ELSIF NOT wTELEFONO_ESTUDIANTE ~* '^[0-9]{10}$' THEN
            RETORNO := 14003;
            RETURN RETORNO;      
        --VALIDACION DEL PARAMETRO wEMAIL_ESTUDIANTE DEBE SER UN EMAIL VALIDO
        ELSIF NOT wEMAIL_ESTUDIANTE ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$' THEN
            RETORNO := 14005;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_GRUPO_ESTUDIO DEBE SER MAYOR A 0 Y NO NULO
        ELSIF wID_GRUPO_ESTUDIO <= 0 OR wID_GRUPO_ESTUDIO IS NULL THEN
            RETORNO := 14006;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_GRUPO_ESTUDIO EXISTA
        ELSIF NOT EXISTS(SELECT 1 FROM TAB_GRUPO_ESTUDIO WHERE ID_GRUPO_ESTUDIO = wID_GRUPO_ESTUDIO) THEN
            RETORNO := 14007;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_ESTUDIANTE DEBE SER MAYOR A 0 Y NO NULO TENER EN CUENTA QUE ES UN VARCHAR
        ELSIF LENGTH(wID_ESTUDIANTE) < 3 OR wID_ESTUDIANTE IS NULL THEN
            RETORNO := 14008;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_ESTUDIANTE NO ESTE DUPLICADO
        ELSIF EXISTS(SELECT 1 FROM TAB_ESTUDIANTE WHERE ID_ESTUDIANTE = wID_ESTUDIANTE) THEN
            RETORNO := 14009;
            RETURN RETORNO;

        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA INSERTAR UN ESTUDIANTE
CREATE OR REPLACE FUNCTION FUN_INSERTAR_ESTUDIANTE(wNOMBRE_ESTUDIANTE TAB_ESTUDIANTE.NOM_ESTUDIANTE%TYPE,
                            wDIRECCION_ESTUDIANTE TAB_ESTUDIANTE.DIR_ESTUDIANTE%TYPE,
                            wTELEFONO_ESTUDIANTE TAB_ESTUDIANTE.TEL_ESTUDIANTE%TYPE,
                            wEMAIL_ESTUDIANTE TAB_ESTUDIANTE.EMAIL_ESTUDIANTE%TYPE,
                            wID_GRUPO_ESTUDIO TAB_ESTUDIANTE.ID_GRUPO_ESTUDIO%TYPE,
                            wID_ESTUDIANTE TAB_ESTUDIANTE.ID_ESTUDIANTE%TYPE,
                            wTIPO_DOCUMENTO TAB_ESTUDIANTE.TIPO_DOCUMENTO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDAR LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_ESTUDIANTE(wNOMBRE_ESTUDIANTE,wDIRECCION_ESTUDIANTE,wTELEFONO_ESTUDIANTE,wEMAIL_ESTUDIANTE,wID_GRUPO_ESTUDIO,wID_ESTUDIANTE,wTIPO_DOCUMENTO);
        --SI LA VALIDACION ES CORRECTA INSERTAR EL REGISTRO
        IF wVALIDAR = 200 THEN
            INSERT INTO TAB_ESTUDIANTE(NOM_ESTUDIANTE,DIR_ESTUDIANTE,TEL_ESTUDIANTE,EMAIL_ESTUDIANTE,ID_GRUPO_ESTUDIO,ID_ESTUDIANTE,TIPO_DOCUMENTO) VALUES(wNOMBRE_ESTUDIANTE,wDIRECCION_ESTUDIANTE,wTELEFONO_ESTUDIANTE,wEMAIL_ESTUDIANTE,wID_GRUPO_ESTUDIO,wID_ESTUDIANTE,wTIPO_DOCUMENTO);
            RETORNO := 200;
            RETURN RETORNO;
        ELSE
            RETORNO := wVALIDAR;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA INSERTAR UN ESTUDIANTE Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DEL ESTUDIANTE
CREATE OR REPLACE FUNCTION FUN_INSERTAR_ESTUDIANTE_JSON(wNOMBRE_ESTUDIANTE TAB_ESTUDIANTE.NOM_ESTUDIANTE%TYPE,
                            wDIRECCION_ESTUDIANTE TAB_ESTUDIANTE.DIR_ESTUDIANTE%TYPE,
                            wTELEFONO_ESTUDIANTE TAB_ESTUDIANTE.TEL_ESTUDIANTE%TYPE,
                            wEMAIL_ESTUDIANTE TAB_ESTUDIANTE.EMAIL_ESTUDIANTE%TYPE,
                            wID_GRUPO_ESTUDIO TAB_ESTUDIANTE.ID_GRUPO_ESTUDIO%TYPE,
                            wID_ESTUDIANTE TAB_ESTUDIANTE.ID_ESTUDIANTE%TYPE,
                            wTIPO_DOCUMENTO TAB_ESTUDIANTE.TIPO_DOCUMENTO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_ESTUDIANTE(wNOMBRE_ESTUDIANTE, wDIRECCION_ESTUDIANTE, wTELEFONO_ESTUDIANTE, wEMAIL_ESTUDIANTE, wID_GRUPO_ESTUDIO, wID_ESTUDIANTE, wTIPO_DOCUMENTO);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA ESTUDIANTE
            --SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_ESTUDIANTE','ID_ESTUDIANTE');
            INSERT INTO TAB_ESTUDIANTE(ID_ESTUDIANTE, NOM_ESTUDIANTE, DIR_ESTUDIANTE, TEL_ESTUDIANTE, EMAIL_ESTUDIANTE, ID_GRUPO_ESTUDIO, TIPO_DOCUMENTO)
            VALUES(wID_ESTUDIANTE, wNOMBRE_ESTUDIANTE, wDIRECCION_ESTUDIANTE, wTELEFONO_ESTUDIANTE, wEMAIL_ESTUDIANTE, wID_GRUPO_ESTUDIO, wTIPO_DOCUMENTO);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',json_build_object('ID_ESTUDIANTE',wID_ESTUDIANTE));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;


