--FUNCIONES DE TRANSACCIONES E INSERCION DE LA TABLA TAB_GRUPO_ESTUDIO ------------------------------------------------------------------------------------------------------------
--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA GRUPO_ESTUDIO
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_GRUPO_ESTUDIO(wNOMBRE_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.NOM_GRUPO_ESTUDIO%TYPE,
                            wDESCRIPCION_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.DESCRIPCION_GRUPO_ESTUDIO%TYPE,
                            wJORNADA_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.JORNADA_GRUPO_ESTUDIO%TYPE,
                            wID_PROGRAMA_ESTUDIO TAB_GRUPO_ESTUDIO.ID_PROGRAMA_ESTUDIO%TYPE,
                            wID_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.ID_GRUPO_ESTUDIO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO wNOMBRE_GRUPO_ESTUDIO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        IF LENGTH(wNOMBRE_GRUPO_ESTUDIO) < 3 OR wNOMBRE_GRUPO_ESTUDIO IS NULL THEN
            RETORNO := 13001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wDESCRIPCION_GRUPO_ESTUDIO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDESCRIPCION_GRUPO_ESTUDIO) < 3 OR wDESCRIPCION_GRUPO_ESTUDIO IS NULL THEN
            RETORNO := 13002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wJORNADA_GRUPO_ESTUDIO TIENE QUE SER MAYOR A 2 CARACTERES Y NO NULO
        ELSIF LENGTH(wJORNADA_GRUPO_ESTUDIO) < 2 OR wJORNADA_GRUPO_ESTUDIO IS NULL THEN
            RETORNO := 13003;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_PROGRAMA_ESTUDIO DEBE SER MAYOR A 0 Y NO NULO
        ELSIF wID_PROGRAMA_ESTUDIO <= 0 OR wID_PROGRAMA_ESTUDIO IS NULL THEN
            RETORNO := 13004;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_PROGRAMA_ESTUDIO EXISTA
        ELSIF NOT EXISTS(SELECT 1 FROM TAB_PROGRAMA_ESTUDIO WHERE ID_PROGRAMA_ESTUDIO = wID_PROGRAMA_ESTUDIO) THEN
            RETORNO := 13005;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_GRUPO_ESTUDIO DEBE SER MAYOR A 0 Y NO NULO
        ELSIF wID_GRUPO_ESTUDIO <= 0 OR wID_GRUPO_ESTUDIO IS NULL THEN
            RETORNO := 13007;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_GRUPO_ESTUDIO NO ESTE DUPLICADO
        ELSIF EXISTS(SELECT 1 FROM TAB_GRUPO_ESTUDIO WHERE ID_GRUPO_ESTUDIO = wID_GRUPO_ESTUDIO) THEN
            RETORNO := 13008;
            RETURN RETORNO;

        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA INSERTAR UN GRUPO DE ESTUDIO
CREATE OR REPLACE FUNCTION FUN_INSERTAR_GRUPO_ESTUDIO(wNOMBRE_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.NOM_GRUPO_ESTUDIO%TYPE,
                            wDESCRIPCION_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.DESCRIPCION_GRUPO_ESTUDIO%TYPE,
                            wJORNADA_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.JORNADA_GRUPO_ESTUDIO%TYPE,
                            wID_PROGRAMA_ESTUDIO TAB_GRUPO_ESTUDIO.ID_PROGRAMA_ESTUDIO%TYPE,
                            wID_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.ID_GRUPO_ESTUDIO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDAR LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_GRUPO_ESTUDIO(wNOMBRE_GRUPO_ESTUDIO,wDESCRIPCION_GRUPO_ESTUDIO,wJORNADA_GRUPO_ESTUDIO,wID_PROGRAMA_ESTUDIO,wID_GRUPO_ESTUDIO);
        --SI LA FUNCION DE VALIDACION RETORNA 200 SE PROCEDE A INSERTAR
        IF wVALIDAR = 200 THEN
            --INSERTAR EL GRUPO DE ESTUDIO
            INSERT INTO TAB_GRUPO_ESTUDIO(NOM_GRUPO_ESTUDIO,DESCRIPCION_GRUPO_ESTUDIO,JORNADA_GRUPO_ESTUDIO,ID_PROGRAMA_ESTUDIO,ID_GRUPO_ESTUDIO)
            VALUES(wNOMBRE_GRUPO_ESTUDIO,wDESCRIPCION_GRUPO_ESTUDIO,wJORNADA_GRUPO_ESTUDIO,wID_PROGRAMA_ESTUDIO,wID_GRUPO_ESTUDIO);

            RETURN wVALIDAR;
        ELSE
            --RETORNAR EL CODIGO DE ERROR DE LA FUNCION DE VALIDACION
            RETORNO := wVALIDAR;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA INSERTAR UN GRUPO DE ESTUDIO Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DEL GRUPO DE ESTUDIO
CREATE OR REPLACE FUNCTION FUN_INSERTAR_GRUPO_ESTUDIO_JSON(wNOMBRE_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.NOM_GRUPO_ESTUDIO%TYPE,
                            wDESCRIPCION_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.DESCRIPCION_GRUPO_ESTUDIO%TYPE,
                            wJORNADA_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.JORNADA_GRUPO_ESTUDIO%TYPE,
                            wID_PROGRAMA_ESTUDIO TAB_GRUPO_ESTUDIO.ID_PROGRAMA_ESTUDIO%TYPE,
                            wID_GRUPO_ESTUDIO TAB_GRUPO_ESTUDIO.ID_GRUPO_ESTUDIO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_GRUPO_ESTUDIO(wNOMBRE_GRUPO_ESTUDIO, wDESCRIPCION_GRUPO_ESTUDIO, wJORNADA_GRUPO_ESTUDIO, wID_PROGRAMA_ESTUDIO, wID_GRUPO_ESTUDIO);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA GRUPO_ESTUDIO
            --SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_GRUPO_ESTUDIO','ID_GRUPO_ESTUDIO');
            INSERT INTO TAB_GRUPO_ESTUDIO(ID_GRUPO_ESTUDIO, NOM_GRUPO_ESTUDIO, DESCRIPCION_GRUPO_ESTUDIO, JORNADA_GRUPO_ESTUDIO, ID_PROGRAMA_ESTUDIO)
            VALUES(wID_GRUPO_ESTUDIO, wNOMBRE_GRUPO_ESTUDIO, wDESCRIPCION_GRUPO_ESTUDIO, wJORNADA_GRUPO_ESTUDIO, wID_PROGRAMA_ESTUDIO);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',json_build_object('ID_GRUPO_ESTUDIO',wID_GRUPO_ESTUDIO));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;
