--FUNCIONES TRANSACCIONALES Y DE INGRESO DE DATOS PARA LA TABLA TAB_SEDE----------------------------------------------------------------------------------------------------------
--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA SEDE
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_SEDE(wNOM_SEDE TAB_SEDE.NOM_SEDE%TYPE,
                            wDIR_SEDE TAB_SEDE.DIR_SEDE%TYPE,wTEL_SEDE TAB_SEDE.TEL_SEDE%TYPE,
                            wEMAIL_SEDE TAB_SEDE.EMAIL_SEDE%TYPE,
                            wID_INSTITUCION TAB_SEDE.ID_INSTITUCION%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO wNOM_SEDE TIENE QUE SER MAYOR A 2 CARACTERES Y NO NULO
        IF LENGTH(wNOM_SEDE) < 2 OR wNOM_SEDE IS NULL THEN
            RETORNO := 10001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wDIR_SEDE TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDIR_SEDE) < 3 OR wDIR_SEDE IS NULL THEN
            RETORNO := 10002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wTEL_SEDE SOLO CONTIENE NUMEROS
        ELSIF NOT wTEL_SEDE ~ '^[0-9]+$' THEN
            RETORNO := 10003;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wTEL_SEDE TIENE QUE SER MAYOR A 3000000000 Y MENOR QUE 4000000000 CARACTERES Y NO NULO 
        ELSIF CAST(wTEL_SEDE AS BIGINT) < 1 OR CAST(wTEL_SEDE AS BIGINT) >= 4000000000 OR wTEL_SEDE IS NULL THEN
            RETORNO := 10004;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wEMAIL_SEDE TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO Y TIENE QUE CONTENER @
        ELSIF LENGTH(wEMAIL_SEDE) < 3 OR wEMAIL_SEDE IS NULL OR NOT wEMAIL_SEDE ~ '@' THEN
            RETORNO := 10005;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_INSTITUCION TIENE QUE SER MAYOR A 0
        ELSIF CAST(wID_INSTITUCION AS INTEGER) < 1 THEN
            RETORNO := 10006;
            RETURN RETORNO;
        --EVALUAR SI LA SEDE YA EXISTE
        --CONVERTIR EL NOMBRE A MAYUSCULAS
        ELSEIF EXISTS(SELECT * FROM TAB_SEDE WHERE UPPER(NOM_SEDE) = UPPER(wNOM_SEDE)) THEN
            RETORNO := 10007;
            RETURN RETORNO;
        --VALIDAR DE QUE LA INSTITUCION EXISTA
        ELSEIF NOT EXISTS(SELECT * FROM TAB_INSTITUCION WHERE ID_INSTITUCION = wID_INSTITUCION) THEN
            RETORNO := 10008;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA VALIDAR LOS DATOS A UPDATE EN LA TABLA SEDE
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_SEDE_UPDATE(wID_SEDE TAB_SEDE.ID_SEDE%TYPE ,wNOM_SEDE TAB_SEDE.NOM_SEDE%TYPE,
                            wDIR_SEDE TAB_SEDE.DIR_SEDE%TYPE,wTEL_SEDE TAB_SEDE.TEL_SEDE%TYPE,
                            wEMAIL_SEDE TAB_SEDE.EMAIL_SEDE%TYPE,
                            wID_INSTITUCION TAB_SEDE.ID_INSTITUCION%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDAR DE QUE EXISTA LA SEDE
        IF NOT EXISTS(SELECT * FROM TAB_SEDE WHERE ID_SEDE = wID_SEDE) THEN
            RETORNO := 10009;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wNOM_SEDE TIENE QUE SER MAYOR A 2 CARACTERES Y NO NULO
        ELSIF LENGTH(wNOM_SEDE) < 2 OR wNOM_SEDE IS NULL THEN
            RETORNO := 10001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wDIR_SEDE TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDIR_SEDE) < 3 OR wDIR_SEDE IS NULL THEN
            RETORNO := 10002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wTEL_SEDE SOLO CONTIENE NUMEROS
        ELSIF NOT wTEL_SEDE ~ '^[0-9]+$' THEN
            RETORNO := 10003;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wTEL_SEDE TIENE QUE SER MAYOR A 3000000000 Y MENOR QUE 4000000000 CARACTERES Y NO NULO 
        ELSIF CAST(wTEL_SEDE AS BIGINT) < 1 OR CAST(wTEL_SEDE AS BIGINT) >= 4000000000 OR wTEL_SEDE IS NULL THEN
            RETORNO := 10004;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wEMAIL_SEDE TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO Y TIENE QUE CONTENER @
        ELSIF LENGTH(wEMAIL_SEDE) < 3 OR wEMAIL_SEDE IS NULL OR NOT wEMAIL_SEDE ~ '@' THEN
            RETORNO := 10005;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_INSTITUCION TIENE QUE SER MAYOR A 0
        ELSIF CAST(wID_INSTITUCION AS INTEGER) < 1 THEN
            RETORNO := 10006;
            RETURN RETORNO;
        --VALIDAR DE QUE LA INSTITUCION EXISTA
        ELSEIF NOT EXISTS(SELECT * FROM TAB_INSTITUCION WHERE ID_INSTITUCION = wID_INSTITUCION) THEN
            RETORNO := 10008;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA INSERTAR DATOS EN LA TABLA SEDE
CREATE OR REPLACE FUNCTION FUN_INSERTAR_SEDE(wNOM_SEDE TAB_SEDE.NOM_SEDE%TYPE,
                            wDIR_SEDE TAB_SEDE.DIR_SEDE%TYPE,wTEL_SEDE TAB_SEDE.TEL_SEDE%TYPE,
                            wEMAIL_SEDE TAB_SEDE.EMAIL_SEDE%TYPE,
                            wID_INSTITUCION TAB_SEDE.ID_INSTITUCION%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_SEDE(wNOM_SEDE,wDIR_SEDE,wTEL_SEDE,wEMAIL_SEDE,wID_INSTITUCION);
        --SI LA FUNCION DE VALIDACION RETORNA 200 SE PROCEDE A INSERTAR LOS DATOS
        IF wVALIDAR = 200 THEN
            --CONVERTIR EL NOMBRE A MAYUSCULAS
            wNOM_SEDE := UPPER(wNOM_SEDE);
            INSERT INTO TAB_SEDE(NOM_SEDE,DIR_SEDE,TEL_SEDE,EMAIL_SEDE,ID_INSTITUCION) VALUES(wNOM_SEDE,wDIR_SEDE,wTEL_SEDE,wEMAIL_SEDE,wID_INSTITUCION) RETURNING ID_SEDE INTO ULTIMOID;
            RETORNO := ULTIMOID;
            RETURN RETORNO;
        ELSE
            RETURN wVALIDAR;
        END IF;
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA INSERTAR DATOS EN LA TABLA SEDE RETORNANDO UN JSON CON CODIGO DE MENSAJE Y MENSAJE Y EL ID DE LA SEDE
--FUNCION PARA INSERTAR UNA SEDE Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DE LA SEDE
CREATE OR REPLACE FUNCTION FUN_INSERTAR_SEDE_JSON(wNOM_SEDE TAB_SEDE.NOM_SEDE%TYPE,
                            wDIR_SEDE TAB_SEDE.DIR_SEDE%TYPE,wTEL_SEDE TAB_SEDE.TEL_SEDE%TYPE,
                            wEMAIL_SEDE TAB_SEDE.EMAIL_SEDE%TYPE,
                            wID_INSTITUCION TAB_SEDE.ID_INSTITUCION%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_SEDE(wNOM_SEDE, wDIR_SEDE, wTEL_SEDE, wEMAIL_SEDE, wID_INSTITUCION);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA SEDE
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_SEDE','ID_SEDE');
            INSERT INTO TAB_SEDE(ID_SEDE, NOM_SEDE, DIR_SEDE, TEL_SEDE, EMAIL_SEDE, ID_INSTITUCION)
            VALUES(ULTIMOID, wNOM_SEDE, wDIR_SEDE, wTEL_SEDE, wEMAIL_SEDE, wID_INSTITUCION);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',json_build_object('ID_SEDE',ULTIMOID));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA OBTENER LOS DATOS DE UNA SEDE A PARTIR DE SU ID RETORNANDO UN JSON
CREATE OR REPLACE FUNCTION FUN_OBTENER_SEDE(wID_SEDE TAB_SEDE.ID_SEDE%TYPE) RETURNS JSON AS
$$
    DECLARE
        DATOS JSON;
        RETORNO JSON;
    BEGIN
        --OBTENER LOS DATOS DE LA SEDE
        SELECT INTO DATOS json_build_object('ID_SEDE',ID_SEDE,'NOM_SEDE',NOM_SEDE,'DIR_SEDE',DIR_SEDE,'TEL_SEDE',TEL_SEDE,'EMAIL_SEDE',EMAIL_SEDE,'ID_INSTITUCION',ID_INSTITUCION)
        FROM TAB_SEDE WHERE ID_SEDE = wID_SEDE;

        --VERIFICAR SI SE REALIZO LA CONSULTA
        IF FOUND THEN
            RETORNO:=json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',DATOS);
            RETURN RETORNO;
        ELSE
            RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
            RETURN RETORNO;
        END IF; 
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA ACTUALIZAR LOS DATOS DE UNA SEDE A PARTIR DE SU ID
CREATE OR REPLACE FUNCTION FUN_ACTUALIZAR_SEDE(wID_SEDE TAB_SEDE.ID_SEDE%TYPE,
                            wNOM_SEDE TAB_SEDE.NOM_SEDE%TYPE,
                            wDIR_SEDE TAB_SEDE.DIR_SEDE%TYPE,
                            wTEL_SEDE TAB_SEDE.TEL_SEDE%TYPE,
                            wEMAIL_SEDE TAB_SEDE.EMAIL_SEDE%TYPE,
                            wID_INSTITUCION TAB_SEDE.ID_INSTITUCION%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_SEDE_UPDATE(wID_SEDE,wNOM_SEDE, wDIR_SEDE, wTEL_SEDE, wEMAIL_SEDE, wID_INSTITUCION);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --ACTUALIZACION DE LOS DATOS
            UPDATE TAB_SEDE SET NOM_SEDE = wNOM_SEDE, DIR_SEDE = wDIR_SEDE, TEL_SEDE = wTEL_SEDE, EMAIL_SEDE = wEMAIL_SEDE, ID_INSTITUCION = wID_INSTITUCION
            WHERE ID_SEDE = wID_SEDE;
            --VERIFICAR SI SE REALIZO LA ACTUALIZACION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1));
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA ELIMINAR UNA SEDE A PARTIR DE SU ID RETORNANDO UN JSON
CREATE OR REPLACE FUNCTION FUN_ELIMINAR_SEDE(wID_SEDE TAB_SEDE.ID_SEDE%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
    BEGIN
        --ELIMINAR LOS DATOS DE LA SEDE
        DELETE FROM TAB_SEDE WHERE ID_SEDE = wID_SEDE;
        --VERIFICAR SI SE REALIZO LA ELIMINACION
        IF FOUND THEN
            RETORNO:=json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200));
            RETURN RETORNO;
        ELSE
            RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA OBTENER TODAS LAS SEDES Y RETORNAR UN JSON
CREATE OR REPLACE FUNCTION FUN_OBTENER_SEDES() RETURNS JSON AS
$$
    DECLARE
        DATOS JSON;
        RETORNO JSON;
    BEGIN
        --OBTENER LOS DATOS DE LA SEDE
        SELECT INTO DATOS json_agg(json_build_object('ID_SEDE',ID_SEDE,'NOM_SEDE',NOM_SEDE,'DIR_SEDE',DIR_SEDE,'TEL_SEDE',TEL_SEDE,'EMAIL_SEDE',EMAIL_SEDE,'ID_INSTITUCION',ID_INSTITUCION))
        FROM TAB_SEDE;

        --VERIFICAR SI SE REALIZO LA CONSULTA
        IF FOUND THEN
            RETORNO:=json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',DATOS);
            RETURN RETORNO;
        ELSE
            RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;



