--FUNCIONES TRANSACCIONALES Y DE INSERCION DE DATOS PARA LA TABLA TAB_TEMAS_AREAS------------------------------------------------------------------------------------------------------------
--FUNCION QUE ME PERMITE VALIDAR LOS DATOS A INSERTAR EN LA TABLA TEMAS_AREAS
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_TEMAS_AREAS(wID_AREA_EVALUAR TAB_TEMAS_AREAS.ID_AREA_EVALUAR%TYPE,
                            wNOM_TEMA TAB_TEMAS_AREAS.NOM_TEMA_AREA%TYPE,
                            wDESCRIPCION_TEMA TAB_TEMAS_AREAS.DESCRIPCION_TEMA_AREA%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO wID_AREA_EVALUAR TIENE QUE SER MAYOR A 0
        IF CAST(wID_AREA_EVALUAR AS INTEGER) < 1 THEN
            RETORNO := 7001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wNOM_TEMA TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        --VALIDAR DE QUE EL ID_AREA_EVALUAR EXISTA
        ELSIF NOT EXISTS(SELECT * FROM TAB_AREAS_EVALUAR WHERE ID_AREA_EVALUAR = wID_AREA_EVALUAR) THEN
            RETORNO := 7005;
            RETURN RETORNO;
        ELSIF LENGTH(wNOM_TEMA) < 3 OR wNOM_TEMA IS NULL THEN
            RETORNO := 7002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wDESCRIPCION_TEMA TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDESCRIPCION_TEMA) < 3 OR wDESCRIPCION_TEMA IS NULL THEN
            RETORNO := 7003;
            RETURN RETORNO;
        --EVALUAR SI EL TEMA YA EXISTE
        --CONVERTIR EL NOMBRE A MAYUSCULAS
        ELSEIF EXISTS(SELECT * FROM TAB_TEMAS_AREAS WHERE UPPER(NOM_TEMA_AREA) = UPPER(wNOM_TEMA)) THEN
            RETORNO := 7004;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION QUE ME PERMITE INSERTAR DATOS EN LA TABLA TEMAS_AREAS
CREATE OR REPLACE FUNCTION FUN_INSERTAR_TEMAS_AREAS(wID_AREA_EVALUAR TAB_TEMAS_AREAS.ID_AREA_EVALUAR%TYPE,
                            wNOM_TEMA TAB_TEMAS_AREAS.NOM_TEMA_AREA%TYPE,
                            wDESCRIPCION_TEMA TAB_TEMAS_AREAS.DESCRIPCION_TEMA_AREA%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        VALIDACION INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDAR LOS DATOS A INSERTAR
        VALIDACION := FUN_VALIDAR_DATOS_TEMAS_AREAS(wID_AREA_EVALUAR,wNOM_TEMA,wDESCRIPCION_TEMA);
        --SI LA VALIDACION ES CORRECTA INSERTAR LOS DATOS
        IF VALIDACION = 200 THEN
            --GENERAR ID AUTOINCREMENTABLE USANDO LA FUNCION funcion_Retorna_ultmoid
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_TEMAS_AREAS','ID_TEMA_AREA');
            --CONVERTIR EL NOMBRE A MAYUSCULAS
            wNOM_TEMA := UPPER(wNOM_TEMA);
            --INSERTAR DATOS EN LA TABLA TEMAS_AREAS
            --IMPRIMIR LOS DATOS A INSERTAR
            RAISE NOTICE 'ULTIMOID: %',ULTIMOID;
            RAISE NOTICE 'ID_AREA_EVALUAR: %',wID_AREA_EVALUAR;
            RAISE NOTICE 'NOM_TEMA: %',wNOM_TEMA;
            RAISE NOTICE 'DESCRIPCION_TEMA: %',wDESCRIPCION_TEMA;

            INSERT INTO TAB_TEMAS_AREAS VALUES(ULTIMOID,wID_AREA_EVALUAR,wNOM_TEMA,wDESCRIPCION_TEMA);
            IF FOUND THEN
                RETORNO := 200;
                RETURN RETORNO;
            ELSE
                RETORNO := 1;
                RETURN RETORNO;
            END IF;
        ELSE
            RETURN VALIDACION;
        END IF;
    END;
$$
LANGUAGE plpgsql;
