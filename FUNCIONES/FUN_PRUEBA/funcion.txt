--FUNCION PARA INSERTAR UNA PRUEBA GENERICA Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DE LA PRUEBA
CREATE OR REPLACE FUNCTION FUN_INSERTAR_PRUEBA_GENERICA_TYT_JSON(
    wNOM_PRUEBA TAB_PRUEBA.NOM_PRUEBA%TYPE,
    wDESCRIPCION_PRUEBA TAB_PRUEBA.DESCRIPCION_PRUEBA%TYPE,
    wTIPO_PRUEBA TAB_PRUEBA.TIPO_PRUEBA%TYPE,
    wFECHA_PRUEBA_INICIO TAB_PRUEBA.FECHA_PRUEBA_INICIO%TYPE,
    wFECHA_PRUEBA_FIN TAB_PRUEBA.FECHA_PRUEBA_FIN%TYPE,
    wDURACION_PRUEBA_MINUTOS TAB_PRUEBA.DURACION_PRUEBA_MINUTOS%TYPE
) RETURNS JSON AS
$$
DECLARE
    RETORNO JSON;
    wVALIDAR INTEGER;
    ULTIMOID INTEGER;
    wID_PREGUNTA_RANDOM INTEGER;
    wCANTIDAD_PREGUNTAS_INSERTADAS INTEGER;
    wCANTIDAD_PREGUNTAS_TOTAL_AREA INTEGER;
    wNUMERO_PREGUNTAS INTEGER := 100;
    i INTEGER;
BEGIN
    -- VALIDACION DE LOS DATOS A INSERTAR
    wVALIDAR := FUN_VALIDAR_DATOS_PRUEBA(wNOM_PRUEBA, wDESCRIPCION_PRUEBA, wTIPO_PRUEBA, wFECHA_PRUEBA_INICIO, wFECHA_PRUEBA_FIN, wDURACION_PRUEBA_MINUTOS);
    IF wVALIDAR <> 200 THEN
        RETORNO := json_build_object('CODIGO', wVALIDAR, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
        RETURN RETORNO;
    ELSE
        -- INICIAR TRANSACCION
        BEGIN
            -- OBTENER EL ULTIMO ID DE LA TABLA PRUEBA
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_PRUEBA', 'ID_PRUEBA');
            INSERT INTO TAB_PRUEBA(ID_PRUEBA, NOM_PRUEBA, DESCRIPCION_PRUEBA, TIPO_PRUEBA, FECHA_PRUEBA_INICIO, FECHA_PRUEBA_FIN, DURACION_PRUEBA_MINUTOS, NUMERO_PREGUNTAS)
            VALUES(ULTIMOID, wNOM_PRUEBA, wDESCRIPCION_PRUEBA, wTIPO_PRUEBA, wFECHA_PRUEBA_INICIO, wFECHA_PRUEBA_FIN, wDURACION_PRUEBA_MINUTOS, wNUMERO_PREGUNTAS);
            
            -- VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                -- VINCULAR PREGUNTAS A LA PRUEBA DE FORMA RANDOM TENIENDO EN CUENTA EL AREA A EVALUAR
                -- OBTENER LA CANTIDAD DE PREGUNTAS EN EL ÁREA A EVALUAR A TRAVÉS DE LOS TEMAS
                FOR i IN 1..4 LOOP
                    SELECT INTO wCANTIDAD_PREGUNTAS_TOTAL_AREA COUNT(*)
                    FROM TAB_PREGUNTA P
                    JOIN TAB_PREGUNTA_TEMAS PT ON P.ID_PREGUNTA = PT.ID_PREGUNTA
                    JOIN TAB_TEMAS_AREAS TA ON PT.ID_TEMA_AREA = TA.ID_TEMA_AREA
                    WHERE TA.ID_AREA_EVALUAR = i;

                    -- VERIFICAR QUE HAY SUFICIENTES PREGUNTAS DISPONIBLES
                    IF wNUMERO_PREGUNTAS / 4 > wCANTIDAD_PREGUNTAS_TOTAL_AREA THEN
                        -- ELIMINAR LA PRUEBA SI NO HAY SUFICIENTES PREGUNTAS
                        DELETE FROM TAB_PRUEBA WHERE ID_PRUEBA = ULTIMOID;
                        RETORNO := json_build_object('CODIGO', 1, 'MENSAJE', 'No hay suficientes preguntas disponibles en el área evaluada', 'AREA', i);
                        RETURN RETORNO;
                    END IF; 
                END LOOP;

                -- INSERTAR LAS PREGUNTAS DE FORMA RANDOM
                wCANTIDAD_PREGUNTAS_INSERTADAS := 0;
                FOR i IN 1..4 LOOP
                    WHILE wCANTIDAD_PREGUNTAS_INSERTADAS < wNUMERO_PREGUNTAS / 4 LOOP
                        -- OBTENER UNA PREGUNTA RANDOM QUE AÚN NO HAYA SIDO INSERTADA
                        SELECT INTO wID_PREGUNTA_RANDOM P.ID_PREGUNTA
                        FROM TAB_PREGUNTA P
                        JOIN TAB_PREGUNTA_TEMAS PT ON P.ID_PREGUNTA = PT.ID_PREGUNTA
                        JOIN TAB_TEMAS_AREAS TA ON PT.ID_TEMA_AREA = TA.ID_TEMA_AREA
                        WHERE TA.ID_AREA_EVALUAR = i
                        AND P.ID_PREGUNTA NOT IN (SELECT ID_PREGUNTA FROM TAB_PRUEBA_PREGUNTAS WHERE ID_PRUEBA = ULTIMOID)
                        ORDER BY RANDOM() LIMIT 1;

                        -- INSERTAR LA PREGUNTA EN LA PRUEBA
                        INSERT INTO TAB_PRUEBA_PREGUNTAS(ID_PRUEBA, ID_PREGUNTA) 
                        VALUES(ULTIMOID, wID_PREGUNTA_RANDOM);
                        wCANTIDAD_PREGUNTAS_INSERTADAS := wCANTIDAD_PREGUNTAS_INSERTADAS + 1;
                    END LOOP;
                END LOOP;

                -- RETORNAR EL RESULTADO EXITOSO
                RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200), 'DATOS', json_build_object('ID_PRUEBA', ULTIMOID));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1));
                RETURN RETORNO;
            END IF;
        EXCEPTION
            WHEN OTHERS THEN
                -- ELIMINAR LA PRUEBA SI OCURRE UN ERROR
                DELETE FROM TAB_PRUEBA WHERE ID_PRUEBA = ULTIMOID;
                RETORNO := json_build_object('CODIGO', 1, 'MENSAJE', 'Error al insertar la prueba');
                RETURN RETORNO;
        END;
    END IF;
END;
$$
LANGUAGE plpgsql;