--FUNCIONES TRANSACCIONALES Y DE INGRESO DE DATOS PARA LA TABLA TAB_PROGRAMA_ESTUDIO----------------------------------------------------------------------------------------------------------
--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA TAB_PROGRAMA_ESTUDIO
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_PROGRAMAS_ESTUDIO(wNOM_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.NOM_PROGRAMA_ESTUDIO%TYPE,
                            wDESCRIPCION_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.DESCRIPCION_PROGRAMA_ESTUDIO%TYPE,
                            wTIPO_FORMACION_PROGRAMA TAB_PROGRAMA_ESTUDIO.TIPO_FORMACION_PROGRAMA%TYPE,
                            wID_AREA_ESTUDIO TAB_PROGRAMA_ESTUDIO.ID_AREA_ESTUDIO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO NOM_PROGRAMA_ESTUDIO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        IF LENGTH(wNOM_PROGRAMA_ESTUDIO) < 3 OR wNOM_PROGRAMA_ESTUDIO IS NULL THEN
            RETORNO := 12001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO DESCRIPCION_PROGRAMA_ESTUDIO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDESCRIPCION_PROGRAMA_ESTUDIO) < 3 OR wDESCRIPCION_PROGRAMA_ESTUDIO IS NULL THEN
            RETORNO := 12002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO TIPO_FORMACION_PROGRAMA TIENE QUE SER MAYOR A 2 CARACTERES Y NO NULO
        ELSIF LENGTH(wTIPO_FORMACION_PROGRAMA) < 2 OR wTIPO_FORMACION_PROGRAMA IS NULL THEN
            RETORNO := 12003;
            RETURN RETORNO;
  
        --VALIDACION DEL PARAMETRO ID_AREA_ESTUDIO TIENE QUE SER MAYOR A 0 Y NO NULO
        ELSIF wID_AREA_ESTUDIO <= 0 OR wID_AREA_ESTUDIO IS NULL THEN
            RETORNO := 12004;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO ID_AREA_ESTUDIO EXISTA
        ELSIF NOT EXISTS(SELECT 1 FROM TAB_AREA_ESTUDIO WHERE ID_AREA_ESTUDIO = wID_AREA_ESTUDIO) THEN
            RETORNO := 12005;
            RETURN RETORNO;
        --VALIDAR SI EL PROGRAMA DE ESTUDIO YA EXISTE
        --CONVERTIR EL NOMBRE DEL PROGRAMA DE ESTUDIO A MAYUSCULAS
        ELSEIF EXISTS(SELECT 1 FROM TAB_PROGRAMA_ESTUDIO WHERE UPPER(NOM_PROGRAMA_ESTUDIO) = UPPER(wNOM_PROGRAMA_ESTUDIO)) THEN
            RETORNO := 12006;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA VALIDAR LOS DATOS A ACTUALIZAR EN LA TABLA TAB_PROGRAMA_ESTUDIO
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_PROGRAMAS_ESTUDIO_UPDATE(wID_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.ID_PROGRAMA_ESTUDIO%TYPE,
                            wNOM_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.NOM_PROGRAMA_ESTUDIO%TYPE,
                            wDESCRIPCION_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.DESCRIPCION_PROGRAMA_ESTUDIO%TYPE,
                            wTIPO_FORMACION_PROGRAMA TAB_PROGRAMA_ESTUDIO.TIPO_FORMACION_PROGRAMA%TYPE,
                            wID_AREA_ESTUDIO TAB_PROGRAMA_ESTUDIO.ID_AREA_ESTUDIO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO ID_PROGRAMA_ESTUDIO EXISTA
        IF NOT EXISTS(SELECT 1 FROM TAB_PROGRAMA_ESTUDIO WHERE ID_PROGRAMA_ESTUDIO = wID_PROGRAMA_ESTUDIO) THEN
            RETORNO := 12000;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO NOM_PROGRAMA_ESTUDIO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wNOM_PROGRAMA_ESTUDIO) < 3 OR wNOM_PROGRAMA_ESTUDIO IS NULL THEN
            RETORNO := 12001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO DESCRIPCION_PROGRAMA_ESTUDIO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDESCRIPCION_PROGRAMA_ESTUDIO) < 3 OR wDESCRIPCION_PROGRAMA_ESTUDIO IS NULL THEN
            RETORNO := 12002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO TIPO_FORMACION_PROGRAMA TIENE QUE SER MAYOR A 2 CARACTERES Y NO NULO
        ELSIF LENGTH(wTIPO_FORMACION_PROGRAMA) < 2 OR wTIPO_FORMACION_PROGRAMA IS NULL THEN
            RETORNO := 12003;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO ID_AREA_ESTUDIO TIENE QUE SER MAYOR A 0 Y NO NULO
        ELSIF wID_AREA_ESTUDIO <= 0 OR wID_AREA_ESTUDIO IS NULL THEN
            RETORNO := 12004;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO ID_AREA_ESTUDIO EXISTA
        ELSIF NOT EXISTS(SELECT 1 FROM TAB_AREA_ESTUDIO WHERE ID_AREA_ESTUDIO = wID_AREA_ESTUDIO) THEN
            RETORNO := 12005;
            RETURN RETORNO;
        --VALIDAR SI EL PROGRAMA DE ESTUDIO YA EXISTE
        --CONVERTIR EL NOMBRE DEL PROGRAMA DE ESTUDIO A MAYUSCULAS
        ELSEIF EXISTS(SELECT 1 FROM TAB_PROGRAMA_ESTUDIO WHERE UPPER(NOM_PROGRAMA_ESTUDIO) = UPPER(wNOM_PROGRAMA_ESTUDIO) AND ID_PROGRAMA_ESTUDIO <> wID_PROGRAMA_ESTUDIO) THEN
            RETORNO := 12006;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA INSERTAR UN PROGRAMA DE ESTUDIO
CREATE OR REPLACE FUNCTION FUN_INSERTAR_PROGRAMAS_ESTUDIO(wNOM_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.NOM_PROGRAMA_ESTUDIO%TYPE,
                            wDESCRIPCION_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.DESCRIPCION_PROGRAMA_ESTUDIO%TYPE,
                            wTIPO_FORMACION_PROGRAMA TAB_PROGRAMA_ESTUDIO.TIPO_FORMACION_PROGRAMA%TYPE,
                            wID_AREA_ESTUDIO TAB_PROGRAMA_ESTUDIO.ID_AREA_ESTUDIO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_PROGRAMAS_ESTUDIO(wNOM_PROGRAMA_ESTUDIO,wDESCRIPCION_PROGRAMA_ESTUDIO,wTIPO_FORMACION_PROGRAMA,wID_AREA_ESTUDIO);
        --SI LA VALIDACION ES CORRECTA SE INSERTA EL PROGRAMA DE ESTUDIO
        IF wVALIDAR = 200 THEN
            INSERT INTO TAB_PROGRAMA_ESTUDIO(NOM_PROGRAMA_ESTUDIO,DESCRIPCION_PROGRAMA_ESTUDIO,TIPO_FORMACION_PROGRAMA,ID_AREA_ESTUDIO) VALUES(wNOM_PROGRAMA_ESTUDIO,wDESCRIPCION_PROGRAMA_ESTUDIO,wTIPO_FORMACION_PROGRAMA,wID_AREA_ESTUDIO) RETURNING ID_PROGRAMA_ESTUDIO INTO ULTIMOID;
            RETORNO := ULTIMOID;
            RETURN RETORNO;
        ELSE
            RETURN wVALIDAR;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA INSERTAR UN PROGRAMA DE ESTUDIO Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DEL PROGRAMA DE ESTUDIO
CREATE OR REPLACE FUNCTION FUN_INSERTAR_PROGRAMAS_ESTUDIO_JSON(wNOM_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.NOM_PROGRAMA_ESTUDIO%TYPE,
                            wDESCRIPCION_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.DESCRIPCION_PROGRAMA_ESTUDIO%TYPE,
                            wTIPO_FORMACION_PROGRAMA TAB_PROGRAMA_ESTUDIO.TIPO_FORMACION_PROGRAMA%TYPE,
                            wID_AREA_ESTUDIO TAB_PROGRAMA_ESTUDIO.ID_AREA_ESTUDIO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_PROGRAMAS_ESTUDIO(wNOM_PROGRAMA_ESTUDIO, wDESCRIPCION_PROGRAMA_ESTUDIO, wTIPO_FORMACION_PROGRAMA, wID_AREA_ESTUDIO);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA PROGRAMAS_ESTUDIO
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_PROGRAMA_ESTUDIO','ID_PROGRAMA_ESTUDIO');
            INSERT INTO TAB_PROGRAMA_ESTUDIO(ID_PROGRAMA_ESTUDIO, NOM_PROGRAMA_ESTUDIO, DESCRIPCION_PROGRAMA_ESTUDIO, TIPO_FORMACION_PROGRAMA, ID_AREA_ESTUDIO)
            VALUES(ULTIMOID, wNOM_PROGRAMA_ESTUDIO, wDESCRIPCION_PROGRAMA_ESTUDIO, wTIPO_FORMACION_PROGRAMA, wID_AREA_ESTUDIO);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',json_build_object('ID_PROGRAMA_ESTUDIO',ULTIMOID));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA OBTENER TODOS LOS PROGRAMAS DE ESTUDIO Y RETORNARLOS EN UN JSON
CREATE OR REPLACE FUNCTION FUN_OBTENER_PROGRAMAS_ESTUDIO() RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        DATOS JSON;
    BEGIN
        --OBTENER LOS DATOS DE LA TABLA PROGRAMAS_ESTUDIO
        DATOS := (SELECT json_agg(json_build_object('ID_PROGRAMA_ESTUDIO',ID_PROGRAMA_ESTUDIO,'NOM_PROGRAMA_ESTUDIO',NOM_PROGRAMA_ESTUDIO,'DESCRIPCION_PROGRAMA_ESTUDIO',DESCRIPCION_PROGRAMA_ESTUDIO,'TIPO_FORMACION_PROGRAMA',TIPO_FORMACION_PROGRAMA,'ID_AREA_ESTUDIO',ID_AREA_ESTUDIO)) FROM TAB_PROGRAMA_ESTUDIO);
        --VALIDAR SI SE OBTUVIERON LOS DATOS
        IF DATOS IS NOT NULL THEN
            RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',DATOS);
            RETURN RETORNO;
        ELSE
            RETORNO := json_build_object('CODIGO',1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1));
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA OBTERNER UN PROGRAMA DE ESTUDIO POR SU ID Y RETORNARLO EN UN JSON
CREATE OR REPLACE FUNCTION FUN_OBTENER_PROGRAMA_ESTUDIO(wID_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.ID_PROGRAMA_ESTUDIO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        DATOS JSON;
    BEGIN
        --OBTENER LOS DATOS DE LA TABLA PROGRAMAS_ESTUDIO
        DATOS := (SELECT json_build_object('ID_PROGRAMA_ESTUDIO',ID_PROGRAMA_ESTUDIO,'NOM_PROGRAMA_ESTUDIO',NOM_PROGRAMA_ESTUDIO,'DESCRIPCION_PROGRAMA_ESTUDIO',DESCRIPCION_PROGRAMA_ESTUDIO,'TIPO_FORMACION_PROGRAMA',TIPO_FORMACION_PROGRAMA,'ID_AREA_ESTUDIO',ID_AREA_ESTUDIO) FROM TAB_PROGRAMA_ESTUDIO WHERE ID_PROGRAMA_ESTUDIO = wID_PROGRAMA_ESTUDIO);
        --VALIDAR SI SE OBTUVIERON LOS DATOS
        IF DATOS IS NOT NULL THEN
            RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',DATOS);
            RETURN RETORNO;
        ELSE
            RETORNO := json_build_object('CODIGO',1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1));
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA ACTUALIZAR UN PROGRAMA DE ESTUDIO POR SU ID Y RETORNARLO EN UN JSON
CREATE OR REPLACE FUNCTION FUN_ACTUALIZAR_PROGRAMA_ESTUDIO(wID_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.ID_PROGRAMA_ESTUDIO%TYPE,
                            wNOM_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.NOM_PROGRAMA_ESTUDIO%TYPE,
                            wDESCRIPCION_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.DESCRIPCION_PROGRAMA_ESTUDIO%TYPE,
                            wTIPO_FORMACION_PROGRAMA TAB_PROGRAMA_ESTUDIO.TIPO_FORMACION_PROGRAMA%TYPE,
                            wID_AREA_ESTUDIO TAB_PROGRAMA_ESTUDIO.ID_AREA_ESTUDIO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A ACTUALIZAR
        wVALIDAR := FUN_VALIDAR_DATOS_PROGRAMAS_ESTUDIO_UPDATE(wID_PROGRAMA_ESTUDIO,wNOM_PROGRAMA_ESTUDIO,wDESCRIPCION_PROGRAMA_ESTUDIO,wTIPO_FORMACION_PROGRAMA,wID_AREA_ESTUDIO);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --ACTUALIZACION DE LOS DATOS
            UPDATE TAB_PROGRAMA_ESTUDIO SET NOM_PROGRAMA_ESTUDIO = wNOM_PROGRAMA_ESTUDIO, DESCRIPCION_PROGRAMA_ESTUDIO = wDESCRIPCION_PROGRAMA_ESTUDIO, TIPO_FORMACION_PROGRAMA = wTIPO_FORMACION_PROGRAMA, ID_AREA_ESTUDIO = wID_AREA_ESTUDIO WHERE ID_PROGRAMA_ESTUDIO = wID_PROGRAMA_ESTUDIO;
            --VERIFICAR SI SE REALIZO LA ACTUALIZACION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1));
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA ELIMINAR UN PROGRAMA DE ESTUDIO POR SU ID Y RETORNARLO EN UN JSON
CREATE OR REPLACE FUNCTION FUN_ELIMINAR_PROGRAMA_ESTUDIO(wID_PROGRAMA_ESTUDIO TAB_PROGRAMA_ESTUDIO.ID_PROGRAMA_ESTUDIO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
    BEGIN
        --ELIMINACION DE LOS DATOS
        DELETE FROM TAB_PROGRAMA_ESTUDIO WHERE ID_PROGRAMA_ESTUDIO = wID_PROGRAMA_ESTUDIO;
        --VERIFICAR SI SE REALIZO LA ELIMINACION
        IF FOUND THEN
            RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200));
            RETURN RETORNO;
        ELSE
            RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1));
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;
