--FUNCIONES TRANSACCIONALES Y DE INGRESO DE DATOS PARA LA TABLA TAB_CONTEXTO----------------------------------------------------------------------------------------------------------
--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA CONTEXTO
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_CONTEXTO(wNOM_CONTEXTO TAB_CONTEXTO.NOM_CONTEXTO%TYPE,
                            wDESC_CONTEXTO TAB_CONTEXTO.DESC_CONTEXTO%TYPE,
                            wlink_media TAB_CONTEXTO.link_media%TYPE, wAUTOR_CONTEXTO TAB_CONTEXTO.AUTOR_CONTEXTO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO wNOM_CONTEXTO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        IF LENGTH(wNOM_CONTEXTO) < 3 OR wNOM_CONTEXTO IS NULL THEN
            RETORNO := 2001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wDESC_CONTEXTO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDESC_CONTEXTO) < 3 OR wDESC_CONTEXTO IS NULL THEN
            RETORNO := 2002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wlink_media TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wlink_media) < 3 OR wlink_media IS NULL THEN
            RETORNO := 2003;
            RETURN RETORNO;
        --EVALUAR SI EL CONTEXTO YA EXISTE
        --CONVERTIR EL NOMBRE A MAYUSCULAS
        ELSEIF EXISTS(SELECT * FROM TAB_CONTEXTO WHERE UPPER(NOM_CONTEXTO) = UPPER(wNOM_CONTEXTO) AND UPPER(AUTOR_CONTEXTO) = UPPER(wAUTOR_CONTEXTO)) THEN
            RETORNO := 2004;
            RETURN RETORNO;
        --EVALUA SI EL AUTOR DEL CONTEXTO ES MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wAUTOR_CONTEXTO) < 3 OR wAUTOR_CONTEXTO IS NULL THEN
            RETORNO := 2005;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;        
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA INSERTAR DATOS EN LA TABLA CONTEXTO
CREATE OR REPLACE FUNCTION FUN_INSERTAR_CONTEXTO(wNOM_CONTEXTO TAB_CONTEXTO.NOM_CONTEXTO%TYPE,
                            wDESC_CONTEXTO TAB_CONTEXTO.DESC_CONTEXTO%TYPE,
                            wlink_media TAB_CONTEXTO.link_media%TYPE, wAUTOR_CONTEXTO TAB_CONTEXTO.AUTOR_CONTEXTO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        VALIDACION INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDAR LOS DATOS A INSERTAR
        VALIDACION := FUN_VALIDAR_DATOS_CONTEXTO(wNOM_CONTEXTO,wDESC_CONTEXTO,wlink_media,wAUTOR_CONTEXTO);
        --SI LA VALIDACION ES CORRECTA INSERTAR LOS DATOS
        IF VALIDACION = 200 THEN
            --GENERAR ID AUTOINCREMENTABLE USANDO LA FUNCION funcion_Retorna_ultmoid
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_CONTEXTO','ID_CONTEXTO');
            --CONVERTIR EL NOMBRE A MAYUSCULAS
            wNOM_CONTEXTO := UPPER(wNOM_CONTEXTO);
            --INSERTAR DATOS EN LA TABLA CONTEXTO
            INSERT INTO TAB_CONTEXTO VALUES(ULTIMOID,wNOM_CONTEXTO,wDESC_CONTEXTO,wlink_media,wAUTOR_CONTEXTO);
            IF FOUND THEN
                RETORNO := 200;
                RETURN RETORNO;
            ELSE
                RETORNO := 1;
                RETURN RETORNO;
            END IF;
        ELSE
            RETURN VALIDACION;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA INSERTAR DATOS EN LA TABLA CONTEXTO
CREATE OR REPLACE FUNCTION FUN_INSERTAR_CONTEXTO_JSON(wNOM_CONTEXTO TAB_CONTEXTO.NOM_CONTEXTO%TYPE,
                            wDESC_CONTEXTO TAB_CONTEXTO.DESC_CONTEXTO%TYPE,
                            wlink_media TAB_CONTEXTO.link_media%TYPE, wAUTOR_CONTEXTO TAB_CONTEXTO.AUTOR_CONTEXTO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO INTEGER;
        VALIDACION INTEGER;
        ULTIMOID INTEGER;
        DESCRIPCION_VALIDACION TEXT;
    BEGIN
        --VALIDAR LOS DATOS A INSERTAR
        VALIDACION := FUN_VALIDAR_DATOS_CONTEXTO(wNOM_CONTEXTO,wDESC_CONTEXTO,wlink_media,wAUTOR_CONTEXTO);
        --OBTENER LA DESCRIPCION DEL CODIGO DE VALIDACION
        SELECT desc_mensaje INTO DESCRIPCION_VALIDACION FROM TAB_MENSAJES WHERE id_mensaje = VALIDACION;
        --SI LA VALIDACION ES CORRECTA INSERTAR LOS DATOS
        IF VALIDACION = 200 THEN
            --GENERAR ID AUTOINCREMENTABLE USANDO LA FUNCION funcion_Retorna_ultmoid
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_CONTEXTO','ID_CONTEXTO');
            --CONVERTIR EL NOMBRE A MAYUSCULAS
            wNOM_CONTEXTO := UPPER(wNOM_CONTEXTO);
            --INSERTAR DATOS EN LA TABLA CONTEXTO
            INSERT INTO TAB_CONTEXTO VALUES(ULTIMOID,wNOM_CONTEXTO,wDESC_CONTEXTO,wlink_media,wAUTOR_CONTEXTO);
            IF FOUND THEN
                RETORNO := 200;
                RETURN json_build_object('CODIGO', RETORNO, 'MENSAJE', DESCRIPCION_VALIDACION, 'DATOS', json_build_object('ID_CONTEXTO', ULTIMOID));
            ELSE
                RETORNO := 1;

                RETURN json_build_object('CODIGO', RETORNO, 'MENSAJE', DESCRIPCION_VALIDACION);
            END IF;
        ELSE
            RETURN json_build_object('CODIGO', VALIDACION, 'MENSAJE', DESCRIPCION_VALIDACION);
        END IF;
    END;
$$
LANGUAGE plpgsql;





