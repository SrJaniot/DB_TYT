--FUNCIONES TRANSACCIONALES Y DE INGRESO DE DATOS PARA LA TABLA TAB_CONTEXTO----------------------------------------------------------------------------------------------------------
--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA CONTEXTO
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_CONTEXTO(wNOM_CONTEXTO TAB_CONTEXTO.NOM_CONTEXTO%TYPE,
                            wDESC_CONTEXTO TAB_CONTEXTO.DESC_CONTEXTO%TYPE,
                            wlink_media TAB_CONTEXTO.link_media%TYPE, wAUTOR_CONTEXTO TAB_CONTEXTO.AUTOR_CONTEXTO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO wNOM_CONTEXTO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        IF LENGTH(wNOM_CONTEXTO) < 3 OR wNOM_CONTEXTO IS NULL THEN
            RETORNO := 2001;
            RETURN RETORNO;
        /*
        --VALIDACION DEL PARAMETRO wDESC_CONTEXTO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDESC_CONTEXTO) < 3 OR wDESC_CONTEXTO IS NULL THEN
            RETORNO := 2002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wlink_media TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wlink_media) < 3 OR wlink_media IS NULL THEN
            RETORNO := 2003;
            RETURN RETORNO;
        */
        --EVALUAR SI EL CONTEXTO YA EXISTE
        --CONVERTIR EL NOMBRE A MAYUSCULAS
        ELSEIF EXISTS(SELECT * FROM TAB_CONTEXTO WHERE UPPER(NOM_CONTEXTO) = UPPER(wNOM_CONTEXTO) AND UPPER(AUTOR_CONTEXTO) = UPPER(wAUTOR_CONTEXTO)) THEN
            RETORNO := 2004;
            RETURN RETORNO;
        --EVALUA SI EL AUTOR DEL CONTEXTO ES MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wAUTOR_CONTEXTO) < 3 OR wAUTOR_CONTEXTO IS NULL THEN
            RETORNO := 2005;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;        
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA VALIDAR LOS DATOS AL ACTUALIZAR UN REGISTRO DE LA TABLA CONTEXTO
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_ACTUALIZAR_CONTEXTO(
    wID_CONTEXTO  TAB_CONTEXTO.ID_CONTEXTO%TYPE,
    wNOM_CONTEXTO TAB_CONTEXTO.NOM_CONTEXTO%TYPE,
    wDESC_CONTEXTO TAB_CONTEXTO.DESC_CONTEXTO%TYPE,
    wlink_media TAB_CONTEXTO.link_media%TYPE,
    wAUTOR_CONTEXTO TAB_CONTEXTO.AUTOR_CONTEXTO%TYPE
) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        -- VALIDACION DEL PARAMETRO wID_CONTEXTO TIENE QUE SER MAYOR A 0 Y NO NULO
        IF wID_CONTEXTO IS NULL OR wID_CONTEXTO <= 0 THEN
            RETORNO := 2006;
            RETURN RETORNO;
        -- VALIDACION DEL PARAMETRO wNOM_CONTEXTO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF wNOM_CONTEXTO IS NULL OR LENGTH(wNOM_CONTEXTO) < 3 THEN
            RETORNO := 2001;
            RETURN RETORNO;
         /*
        -- VALIDACION DEL PARAMETRO wDESC_CONTEXTO TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF wDESC_CONTEXTO IS NULL OR LENGTH(wDESC_CONTEXTO) < 3 THEN
            RETORNO := 2002;
            RETURN RETORNO;
        -- VALIDACION DEL PARAMETRO wlink_media TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
       
        ELSIF wlink_media IS NULL OR LENGTH(wlink_media) < 3 THEN
            RETORNO := 2003;
            RETURN RETORNO;
        */
        -- EVALUA SI EL AUTOR DEL CONTEXTO ES MAYOR A 3 CARACTERES Y NO NULO
        ELSIF wAUTOR_CONTEXTO IS NULL OR LENGTH(wAUTOR_CONTEXTO) < 3 THEN
            RETORNO := 2005;
            RETURN RETORNO;
        -- EVALUAR SI EL CONTEXTO YA EXISTE CON EL MISMO NOMBRE Y AUTOR, PERO DISTINTO ID
        ELSIF EXISTS(
            SELECT 1 
            FROM TAB_CONTEXTO 
            WHERE UPPER(NOM_CONTEXTO) = UPPER(wNOM_CONTEXTO) 
            AND UPPER(AUTOR_CONTEXTO) = UPPER(wAUTOR_CONTEXTO) 
            AND ID_CONTEXTO <> wID_CONTEXTO
        ) THEN
            RETORNO := 2004;
            RETURN RETORNO;
        -- EVALUAR DE QUE EXISTA EL REGISTRO CON EL ID DADO
        ELSIF NOT EXISTS(
            SELECT 1 
            FROM TAB_CONTEXTO 
            WHERE ID_CONTEXTO = wID_CONTEXTO
        ) THEN
            RETORNO := 2007;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;        
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA INSERTAR DATOS EN LA TABLA CONTEXTO
CREATE OR REPLACE FUNCTION FUN_INSERTAR_CONTEXTO(wNOM_CONTEXTO TAB_CONTEXTO.NOM_CONTEXTO%TYPE,
                            wDESC_CONTEXTO TAB_CONTEXTO.DESC_CONTEXTO%TYPE,
                            wlink_media TAB_CONTEXTO.link_media%TYPE, wAUTOR_CONTEXTO TAB_CONTEXTO.AUTOR_CONTEXTO%TYPE,
                            wTIPO_CONTEXTO TAB_CONTEXTO.TIPO_CONTEXTO%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        VALIDACION INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDAR LOS DATOS A INSERTAR
        VALIDACION := FUN_VALIDAR_DATOS_CONTEXTO(wNOM_CONTEXTO,wDESC_CONTEXTO,wlink_media,wAUTOR_CONTEXTO);
        --SI LA VALIDACION ES CORRECTA INSERTAR LOS DATOS
        IF VALIDACION = 200 THEN
            --GENERAR ID AUTOINCREMENTABLE USANDO LA FUNCION funcion_Retorna_ultmoid
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_CONTEXTO','ID_CONTEXTO');
            --CONVERTIR EL NOMBRE A MAYUSCULAS
            wNOM_CONTEXTO := UPPER(wNOM_CONTEXTO);
            --INSERTAR DATOS EN LA TABLA CONTEXTO
            INSERT INTO TAB_CONTEXTO VALUES(ULTIMOID,wNOM_CONTEXTO,wDESC_CONTEXTO,wlink_media,wAUTOR_CONTEXTO,wTIPO_CONTEXTO);
            IF FOUND THEN
                RETORNO := 200;
                RETURN RETORNO;
            ELSE
                RETORNO := 1;
                RETURN RETORNO;
            END IF;
        ELSE
            RETURN VALIDACION;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA INSERTAR DATOS EN LA TABLA CONTEXTO
CREATE OR REPLACE FUNCTION FUN_INSERTAR_CONTEXTO_JSON(wNOM_CONTEXTO TAB_CONTEXTO.NOM_CONTEXTO%TYPE,
                            wDESC_CONTEXTO TAB_CONTEXTO.DESC_CONTEXTO%TYPE,
                            wlink_media TAB_CONTEXTO.link_media%TYPE, wAUTOR_CONTEXTO TAB_CONTEXTO.AUTOR_CONTEXTO%TYPE,
                            wTIPO_CONTEXTO TAB_CONTEXTO.TIPO_CONTEXTO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO INTEGER;
        VALIDACION INTEGER;
        ULTIMOID INTEGER;
        DESCRIPCION_VALIDACION TEXT;
    BEGIN
        --VALIDAR LOS DATOS A INSERTAR
        VALIDACION := FUN_VALIDAR_DATOS_CONTEXTO(wNOM_CONTEXTO,wDESC_CONTEXTO,wlink_media,wAUTOR_CONTEXTO);
        --OBTENER LA DESCRIPCION DEL CODIGO DE VALIDACION
        SELECT desc_mensaje INTO DESCRIPCION_VALIDACION FROM TAB_MENSAJES WHERE id_mensaje = VALIDACION;
        --SI LA VALIDACION ES CORRECTA INSERTAR LOS DATOS
        IF VALIDACION = 200 THEN
            --GENERAR ID AUTOINCREMENTABLE USANDO LA FUNCION funcion_Retorna_ultmoid
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_CONTEXTO','ID_CONTEXTO');
            --CONVERTIR EL NOMBRE A MAYUSCULAS
            wNOM_CONTEXTO := UPPER(wNOM_CONTEXTO);
            --INSERTAR DATOS EN LA TABLA CONTEXTO
            INSERT INTO TAB_CONTEXTO VALUES(ULTIMOID,wNOM_CONTEXTO,wDESC_CONTEXTO,wlink_media,wAUTOR_CONTEXTO,wTIPO_CONTEXTO);
            IF FOUND THEN
                RETORNO := 200;
                RETURN json_build_object('CODIGO', RETORNO, 'MENSAJE', DESCRIPCION_VALIDACION, 'DATOS', json_build_object('ID_CONTEXTO', ULTIMOID));
            ELSE
                RETORNO := 1;

                RETURN json_build_object('CODIGO', RETORNO, 'MENSAJE', DESCRIPCION_VALIDACION);
            END IF;
        ELSE
            RETURN json_build_object('CODIGO', VALIDACION, 'MENSAJE', DESCRIPCION_VALIDACION);
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION QUE ME TRAE TODOS LOS REGISTROS DE LA TABLA CONTEXTO Y ME LOS RETORNA EN UN JSON DONDE LA ESTUCTURA ES LA SIGUIENTE ES CODIGO, MENSAJE, DATOS Y EN DATOS LOS REGISTROS
CREATE OR REPLACE FUNCTION FUN_CONSULTAR_CONTEXTO() RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        REGISTROS JSON;
    BEGIN
        --CONSULTAR TODOS LOS REGISTROS DE LA TABLA CONTEXTO solo traer los campos id_contexto, nom_contexto des_contetexto link_media Autor_contexto y meterlos en una lista
        SELECT INTO REGISTROS json_agg(json_build_object('ID_CONTEXTO',ID_CONTEXTO,'NOM_CONTEXTO',NOM_CONTEXTO,'DESC_CONTEXTO',DESC_CONTEXTO,'LINK_MEDIA',LINK_MEDIA,'AUTOR_CONTEXTO',AUTOR_CONTEXTO,'TIPO_CONTEXTO',TIPO_CONTEXTO)) FROM TAB_CONTEXTO;
        --SI NO SE ENCUENTRAN REGISTROS
        IF REGISTROS IS NULL THEN
            RETORNO := json_build_object('CODIGO',100,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 100));
            RETURN RETORNO;
        END IF;
        --RETORNAR LOS REGISTROS
        RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',REGISTROS);
        RETURN  RETORNO;
    END;
$$
LANGUAGE plpgsql;


--FUNCION QUE ME TRAE UN REGISTRO DE LA TABLA CONTEXTO Y ME LO RETORNA EN UN JSON DONDE LA ESTUCTURA ES LA SIGUIENTE es CODIGO, MENSAJE, DATOS Y EN DATOS EL REGISTRO
CREATE OR REPLACE FUNCTION FUN_CONSULTAR_CONTEXTO_ID(wID_CONTEXTO TAB_CONTEXTO.ID_CONTEXTO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        REGISTRO JSON;
    BEGIN
        --CONSULTAR EL REGISTRO DE LA TABLA CONTEXTO solo traer los campos id_contexto, nom_contexto des_contetexto link_media Autor_contexto y meterlos en una lista
        SELECT INTO REGISTRO json_build_object('ID_CONTEXTO',ID_CONTEXTO,'NOM_CONTEXTO',NOM_CONTEXTO,'DESC_CONTEXTO',DESC_CONTEXTO,'LINK_MEDIA',LINK_MEDIA,'AUTOR_CONTEXTO',AUTOR_CONTEXTO,'TIPO_CONTEXTO',TIPO_CONTEXTO) FROM TAB_CONTEXTO WHERE ID_CONTEXTO = wID_CONTEXTO;
        --SI NO SE ENCUENTRAN REGISTROS
        IF REGISTRO IS NULL THEN
            RETORNO := json_build_object('CODIGO',100,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 100));
            RETURN RETORNO;
        END IF;
        --RETORNAR LOS REGISTROS
        RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',REGISTRO);
        RETURN  RETORNO;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA ACTUALIZAR UN REGISTRO DE LA TABLA CONTEXTO RETORNA UN JSON CON LA ESTRUCTURA CODIGO, MENSAJE Y DATOS
CREATE OR REPLACE FUNCTION FUN_ACTUALIZAR_CONTEXTO(wID_CONTEXTO TAB_CONTEXTO.ID_CONTEXTO%TYPE,
                            wNOM_CONTEXTO TAB_CONTEXTO.NOM_CONTEXTO%TYPE,
                            wDESC_CONTEXTO TAB_CONTEXTO.DESC_CONTEXTO%TYPE,
                            wlink_media TAB_CONTEXTO.link_media%TYPE, wAUTOR_CONTEXTO TAB_CONTEXTO.AUTOR_CONTEXTO%TYPE,
                            wTIPO_CONTEXTO TAB_CONTEXTO.TIPO_CONTEXTO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        VALIDACION INTEGER;
        DESCRIPCION_VALIDACION TEXT;
    BEGIN
        --VALIDAR LOS DATOS A INSERTAR
        VALIDACION := FUN_VALIDAR_DATOS_ACTUALIZAR_CONTEXTO(wID_CONTEXTO,wNOM_CONTEXTO,wDESC_CONTEXTO,wlink_media,wAUTOR_CONTEXTO);
        --OBTENER LA DESCRIPCION DEL CODIGO DE VALIDACION
        SELECT desc_mensaje INTO DESCRIPCION_VALIDACION FROM TAB_MENSAJES WHERE id_mensaje = VALIDACION;
        --SI LA VALIDACION ES CORRECTA INSERTAR LOS DATOS
        IF VALIDACION = 200 THEN
            --CONVERTIR EL NOMBRE A MAYUSCULAS
            wNOM_CONTEXTO := UPPER(wNOM_CONTEXTO);
            --ACTUALIZAR DATOS EN LA TABLA CONTEXTO
            UPDATE TAB_CONTEXTO SET NOM_CONTEXTO = wNOM_CONTEXTO, DESC_CONTEXTO = wDESC_CONTEXTO, LINK_MEDIA = wlink_media, AUTOR_CONTEXTO = wAUTOR_CONTEXTO, TIPO_CONTEXTO= wTIPO_CONTEXTO WHERE ID_CONTEXTO = wID_CONTEXTO;
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', DESCRIPCION_VALIDACION, 'DATOS', json_build_object('ID_CONTEXTO', wID_CONTEXTO));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1, 'MENSAJE', 'NO SE PUDO ACTUALIZAR EL REGISTRO ASEGURESE QUE EL ID EXISTA');
                RETURN RETORNO;
            END IF;
        ELSE
            RETURN json_build_object('CODIGO', VALIDACION, 'MENSAJE', DESCRIPCION_VALIDACION);
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA ELIMINAR UN REGISTRO DE LA TABLA CONTEXTO RETORNA UN JSON CON LA ESTRUCTURA CODIGO, MENSAJE Y DATOS
CREATE OR REPLACE FUNCTION FUN_ELIMINAR_CONTEXTO(wID_CONTEXTO TAB_CONTEXTO.ID_CONTEXTO%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        DESCRIPCION_VALIDACION TEXT;
    BEGIN
        --ELIMINAR DATOS EN LA TABLA CONTEXTO
        --VALIDAR QUE EL CONTEXTO EXISTA
        IF NOT EXISTS(SELECT 1 FROM TAB_CONTEXTO WHERE ID_CONTEXTO = wID_CONTEXTO) THEN
            RETORNO := json_build_object ('CODIGO', 2009, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 2009));
            RETURN RETORNO;
        END IF;
        --valida que el contexto no este relacionado con una pregunta
        IF EXISTS(SELECT 1 FROM TAB_PREGUNTA WHERE ID_CONTEXTO = wID_CONTEXTO) THEN
            RETORNO := json_build_object ('CODIGO', 2008, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 2008));
            RETURN RETORNO;
        END IF;
        
        
        DELETE FROM TAB_CONTEXTO WHERE ID_CONTEXTO = wID_CONTEXTO;
        IF FOUND THEN
            RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', 'REGISTRO ELIMINADO', 'DATOS', json_build_object('ID_CONTEXTO', wID_CONTEXTO));
            RETURN RETORNO;
        ELSE
            RETORNO := json_build_object('CODIGO', 1, 'MENSAJE', 'NO SE PUDO ELIMINAR EL REGISTRO ASEGURESE QUE EL ID EXISTA O QUE NO TENGA DEPENDENCIAS');
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;





