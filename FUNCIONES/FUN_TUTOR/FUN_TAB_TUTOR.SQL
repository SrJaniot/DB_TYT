CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_TUTOR(
    wNOM_TUTOR TAB_TUTOR.NOM_TUTOR%TYPE,
    wAPELLIDO_TUTOR TAB_TUTOR.APELLIDO_TUTOR%TYPE,
    wDIR_TUTOR TAB_TUTOR.DIR_TUTOR%TYPE,
    wTEL_TUTOR TAB_TUTOR.TEL_TUTOR%TYPE,
    wEMAIL_TUTOR TAB_TUTOR.EMAIL_TUTOR%TYPE,
    wID_AREA_EVALUAR TAB_TUTOR.ID_AREA_EVALUAR%TYPE,
    wID_TUTOR TAB_TUTOR.ID_TUTOR%TYPE
) RETURNS INTEGER AS
$$
DECLARE
    RETORNO INTEGER;
BEGIN
    -- Validación del nombre del tutor
    IF LENGTH(wNOM_TUTOR) < 3 OR wNOM_TUTOR IS NULL THEN
        RETORNO := 14001;
        RETURN RETORNO;
    -- Validación del apellido del tutor
    ELSIF LENGTH(wAPELLIDO_TUTOR) < 3 OR wAPELLIDO_TUTOR IS NULL THEN
        RETORNO := 14002;
        RETURN RETORNO;
    -- Validación de la dirección del tutor
    ELSIF LENGTH(wDIR_TUTOR) < 3 OR wDIR_TUTOR IS NULL THEN
        RETORNO := 14003;
        RETURN RETORNO;
    -- Validación del teléfono del tutor
    ELSIF NOT wTEL_TUTOR ~* '^[0-9]{10}$' THEN
        RETORNO := 14004;
        RETURN RETORNO;      
    -- Validación del email del tutor
    ELSIF NOT wEMAIL_TUTOR ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$' THEN
        RETORNO := 14005;
        RETURN RETORNO;
    -- VALIDAR QUE EL CORREO NO ESTE REGISTRADO
    ELSIF EXISTS(SELECT 1 FROM TAB_TUTOR WHERE EMAIL_TUTOR = wEMAIL_TUTOR) THEN
        RETORNO := 14011;
        RETURN RETORNO;
    -- Validación del ID del área a evaluar
    ELSIF wID_AREA_EVALUAR <= 0 OR wID_AREA_EVALUAR IS NULL THEN
        RETORNO := 14006;
        RETURN RETORNO;
    -- Verificación de la existencia del área a evaluar
    ELSIF NOT EXISTS(SELECT 1 FROM TAB_AREAS_EVALUAR WHERE ID_AREA_EVALUAR = wID_AREA_EVALUAR) THEN
        RETORNO := 14007;
        RETURN RETORNO;
    -- Validación del ID del tutor
    ELSIF wID_TUTOR <= 0 OR wID_TUTOR IS NULL THEN
        RETORNO := 14008;
        RETURN RETORNO;
    -- Verificación de duplicados del ID del tutor
    ELSIF EXISTS(SELECT 1 FROM TAB_TUTOR WHERE ID_TUTOR = wID_TUTOR) THEN
        RETORNO := 14009;
        RETURN RETORNO;
    ELSE
        RETORNO := 200;
        RETURN RETORNO;
    END IF;
END;
$$
LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_TUTORUPDATE(
    wID_TUTOR TAB_TUTOR.ID_TUTOR%TYPE,
    wNOM_TUTOR TAB_TUTOR.NOM_TUTOR%TYPE,
    wAPELLIDO_TUTOR TAB_TUTOR.APELLIDO_TUTOR%TYPE,
    wDIR_TUTOR TAB_TUTOR.DIR_TUTOR%TYPE,
    wTEL_TUTOR TAB_TUTOR.TEL_TUTOR%TYPE,
    wEMAIL_TUTOR TAB_TUTOR.EMAIL_TUTOR%TYPE,
    wID_AREA_EVALUAR TAB_TUTOR.ID_AREA_EVALUAR%TYPE
) RETURNS INTEGER AS
$$
DECLARE
    RETORNO INTEGER;
BEGIN
    -- Validar que el ID del tutor exista
    IF NOT EXISTS(SELECT 1 FROM TAB_TUTOR WHERE ID_TUTOR = wID_TUTOR) THEN
        RETORNO := 14010;
        RETURN RETORNO;
    -- Validación del nombre del tutor
    ELSIF LENGTH(wNOM_TUTOR) < 3 OR wNOM_TUTOR IS NULL THEN
        RETORNO := 14001;
        RETURN RETORNO;
    -- Validación del apellido del tutor
    ELSIF LENGTH(wAPELLIDO_TUTOR) < 3 OR wAPELLIDO_TUTOR IS NULL THEN
        RETORNO := 14002;
        RETURN RETORNO;
    -- Validación de la dirección del tutor
    ELSIF LENGTH(wDIR_TUTOR) < 3 OR wDIR_TUTOR IS NULL THEN
        RETORNO := 14003;
        RETURN RETORNO;
    -- Validación del teléfono del tutor
    ELSIF NOT wTEL_TUTOR ~* '^[0-9]{10}$' THEN
        RETORNO := 14004;
        RETURN RETORNO;      
    -- Validación del email del tutor
    ELSIF NOT wEMAIL_TUTOR ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$' THEN
        RETORNO := 14005;
        RETURN RETORNO;
    -- Validación del ID del área a evaluar
    ELSIF wID_AREA_EVALUAR <= 0 OR wID_AREA_EVALUAR IS NULL THEN
        RETORNO := 14006;
        RETURN RETORNO;
    -- Verificación de la existencia del área a evaluar
    ELSIF NOT EXISTS(SELECT 1 FROM TAB_AREAS_EVALUAR WHERE ID_AREA_EVALUAR = wID_AREA_EVALUAR) THEN
        RETORNO := 14007;
        RETURN RETORNO;
    ELSE
        RETORNO := 200;
        RETURN RETORNO;
    END IF;
END;
$$
LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION FUN_INSERTAR_TUTOR(
    wNOM_TUTOR TAB_TUTOR.NOM_TUTOR%TYPE,
    wAPELLIDO_TUTOR TAB_TUTOR.APELLIDO_TUTOR%TYPE,
    wDIR_TUTOR TAB_TUTOR.DIR_TUTOR%TYPE,
    wTEL_TUTOR TAB_TUTOR.TEL_TUTOR%TYPE,
    wEMAIL_TUTOR TAB_TUTOR.EMAIL_TUTOR%TYPE,
    wID_AREA_EVALUAR TAB_TUTOR.ID_AREA_EVALUAR%TYPE,
    wID_TUTOR TAB_TUTOR.ID_TUTOR%TYPE
) RETURNS INTEGER AS
$$
DECLARE
    RETORNO INTEGER;
    wVALIDAR INTEGER;
BEGIN
    -- Validar los datos a insertar
    wVALIDAR := FUN_VALIDAR_DATOS_TUTOR(wNOM_TUTOR, wAPELLIDO_TUTOR, wDIR_TUTOR, wTEL_TUTOR, wEMAIL_TUTOR, wID_AREA_EVALUAR, wID_TUTOR);
    
    IF wVALIDAR = 200 THEN
        INSERT INTO TAB_TUTOR(NOM_TUTOR, APELLIDO_TUTOR, DIR_TUTOR, TEL_TUTOR, EMAIL_TUTOR, ID_AREA_EVALUAR, ID_TUTOR)
        VALUES(wNOM_TUTOR, wAPELLIDO_TUTOR, wDIR_TUTOR, wTEL_TUTOR, wEMAIL_TUTOR, wID_AREA_EVALUAR, wID_TUTOR);
        RETORNO := 200;
        RETURN RETORNO;
    ELSE
        RETORNO := wVALIDAR;
        RETURN RETORNO;
    END IF;
END;
$$
LANGUAGE plpgsql;





CREATE OR REPLACE FUNCTION FUN_INSERTAR_TUTOR_JSON(
    wNOM_TUTOR TAB_TUTOR.NOM_TUTOR%TYPE,
    wAPELLIDO_TUTOR TAB_TUTOR.APELLIDO_TUTOR%TYPE,
    wDIR_TUTOR TAB_TUTOR.DIR_TUTOR%TYPE,
    wTEL_TUTOR TAB_TUTOR.TEL_TUTOR%TYPE,
    wEMAIL_TUTOR TAB_TUTOR.EMAIL_TUTOR%TYPE,
    wID_AREA_EVALUAR TAB_TUTOR.ID_AREA_EVALUAR%TYPE,
    wID_TUTOR TAB_TUTOR.ID_TUTOR%TYPE
) RETURNS JSON AS
$$
DECLARE
    RETORNO JSON;
    wVALIDAR INTEGER;
BEGIN
    -- Validar los datos a insertar
    wVALIDAR := FUN_VALIDAR_DATOS_TUTOR(wNOM_TUTOR, wAPELLIDO_TUTOR, wDIR_TUTOR, wTEL_TUTOR, wEMAIL_TUTOR, wID_AREA_EVALUAR, wID_TUTOR);
    
    IF wVALIDAR <> 200 THEN
        RETORNO := json_build_object('CODIGO', wVALIDAR, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
        RETURN RETORNO;
    ELSE
        -- Insertar los datos
        INSERT INTO TAB_TUTOR(ID_TUTOR, NOM_TUTOR, APELLIDO_TUTOR, DIR_TUTOR, TEL_TUTOR, EMAIL_TUTOR, ID_AREA_EVALUAR)
        VALUES(wID_TUTOR, wNOM_TUTOR, wAPELLIDO_TUTOR, wDIR_TUTOR, wTEL_TUTOR, wEMAIL_TUTOR, wID_AREA_EVALUAR);
        
        -- Verificar si se realizó la inserción
        IF FOUND THEN
            RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', 'INSERTADO', 'ID_TUTOR', wID_TUTOR);
        ELSE
            RETORNO := json_build_object('CODIGO', 400, 'MENSAJE', 'ERROR AL INSERTAR');
        END IF;
        RETURN RETORNO;
    END IF;
END;
$$
LANGUAGE plpgsql;


--FUNCION PARA OBTENER TODOS LOS TUTORES DE LA BASE DE DATOS Y RETORNARLOS EN UN JSON
CREATE OR REPLACE FUNCTION FUN_OBTENER_TUTORES() RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        DATOS JSON;
    BEGIN
        -- Obtener todos los tutores
        DATOS := (SELECT json_agg(json_build_object(
            'ID_TUTOR', ID_TUTOR,
            'NOM_TUTOR', NOM_TUTOR,
            'APELLIDO_TUTOR', APELLIDO_TUTOR,
            'DIR_TUTOR', DIR_TUTOR,
            'TEL_TUTOR', TEL_TUTOR,
            'EMAIL_TUTOR', EMAIL_TUTOR,
            'ID_AREA_EVALUAR', ID_AREA_EVALUAR
        )) FROM TAB_TUTOR);
        -- VALIDAR SI SE OBTUVIERON DATOS
        IF DATOS IS NOT NULL THEN
            RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', 'CONSULTA EXITOSA', 'DATOS', DATOS);
        ELSE
            RETORNO := json_build_object('CODIGO', 100, 'MENSAJE', 'NO SE ENCONTRARON DATOS');
        END IF;        
        RETURN RETORNO;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA OBTENER UN TUTOR ESPECIFICO POR ID DE LA BASE DE DATOS Y RETORNARLO EN UN JSON
CREATE OR REPLACE FUNCTION FUN_OBTENER_TUTOR(
    wID_TUTOR TAB_TUTOR.ID_TUTOR%TYPE
) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        DATOS JSON;
    BEGIN
        -- Obtener un tutor específico
        DATOS := (SELECT json_build_object(
            'ID_TUTOR', ID_TUTOR,
            'NOM_TUTOR', NOM_TUTOR,
            'APELLIDO_TUTOR', APELLIDO_TUTOR,
            'DIR_TUTOR', DIR_TUTOR,
            'TEL_TUTOR', TEL_TUTOR,
            'EMAIL_TUTOR', EMAIL_TUTOR,
            'ID_AREA_EVALUAR', ID_AREA_EVALUAR
        ) FROM TAB_TUTOR WHERE ID_TUTOR = wID_TUTOR);
        -- VALIDAR SI SE OBTUVIERON DATOS
        IF DATOS IS NOT NULL THEN
            RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', 'CONSULTA EXITOSA', 'DATOS', DATOS);
        ELSE
            RETORNO := json_build_object('CODIGO', 100, 'MENSAJE', 'NO SE ENCONTRARON DATOS');
        END IF;
        RETURN RETORNO;
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA ACTUALIZAR UN TUTOR DE LA BASE DE DATOS Y RETORNAR UN JSON CON EL RESULTADO
CREATE OR REPLACE FUNCTION FUN_ACTUALIZAR_TUTOR(
    wID_TUTOR TAB_TUTOR.ID_TUTOR%TYPE,
    wNOM_TUTOR TAB_TUTOR.NOM_TUTOR%TYPE,
    wAPELLIDO_TUTOR TAB_TUTOR.APELLIDO_TUTOR%TYPE,
    wDIR_TUTOR TAB_TUTOR.DIR_TUTOR%TYPE,
    wTEL_TUTOR TAB_TUTOR.TEL_TUTOR%TYPE,
    wEMAIL_TUTOR TAB_TUTOR.EMAIL_TUTOR%TYPE,
    wID_AREA_EVALUAR TAB_TUTOR.ID_AREA_EVALUAR%TYPE
) RETURNS JSON AS
$$
DECLARE
    RETORNO JSON;
    wVALIDAR INTEGER;
BEGIN
    -- Validar los datos a actualizar
    wVALIDAR := FUN_VALIDAR_DATOS_TUTORUPDATE(wID_TUTOR, wNOM_TUTOR, wAPELLIDO_TUTOR, wDIR_TUTOR, wTEL_TUTOR, wEMAIL_TUTOR, wID_AREA_EVALUAR);
    
    IF wVALIDAR <> 200 THEN
        RETORNO := json_build_object('CODIGO', wVALIDAR, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
        RETURN RETORNO;
    ELSE
        -- Actualizar los datos
        UPDATE TAB_TUTOR SET
            NOM_TUTOR = wNOM_TUTOR,
            APELLIDO_TUTOR = wAPELLIDO_TUTOR,
            DIR_TUTOR = wDIR_TUTOR,
            TEL_TUTOR = wTEL_TUTOR,
            EMAIL_TUTOR = wEMAIL_TUTOR,
            ID_AREA_EVALUAR = wID_AREA_EVALUAR
        WHERE ID_TUTOR = wID_TUTOR;
        
        -- Verificar si se realizó la actualización
        IF FOUND THEN
            RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', 'ACTUALIZADO', 'ID_TUTOR', wID_TUTOR);
        ELSE
            RETORNO := json_build_object('CODIGO', 100, 'MENSAJE', 'ERROR AL ACTUALIZAR');
        END IF;
        RETURN RETORNO;
    END IF;
END;
$$
LANGUAGE plpgsql;

