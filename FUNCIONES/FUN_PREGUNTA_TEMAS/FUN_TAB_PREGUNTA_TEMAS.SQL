--FUNCIONES DE INSERCION Y TRANSACCIONALES PARA LA TABLA PREGUNTA_TEMAS ------------------------------------------------
--FUNCION PARA VALIDAR DATOS DE INSERCION DE LA TABLA TAB_PREGUNTA_TEMAS
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_PREGUNTA_TEMAS(wID_PREGUNTA TAB_PREGUNTA_TEMAS.ID_PREGUNTA%TYPE,
                                                            wID_TEMA_AREA TAB_PREGUNTA_TEMAS.ID_TEMA_AREA%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;

    BEGIN
        --VALIDAR QUE EL ID DE LA PREGUNTA EXISTA
        IF NOT EXISTS (SELECT ID_PREGUNTA FROM TAB_PREGUNTA WHERE ID_PREGUNTA = wID_PREGUNTA) THEN
            RETORNO := 15001;
            RETURN RETORNO;
        END IF;
        --VALIDAR QUE EL ID DEL TEMA EXISTA
        IF NOT EXISTS (SELECT ID_TEMA_AREA FROM TAB_TEMAS_AREAS WHERE ID_TEMA_AREA = wID_TEMA_AREA) THEN
            RETORNO := 15002;
            RETURN RETORNO;
        END IF;
        --VALIDAR QUE NO EXISTA EL REGISTRO DUPLICADO
        IF EXISTS (SELECT ID_PREGUNTA FROM TAB_PREGUNTA_TEMAS WHERE ID_PREGUNTA = wID_PREGUNTA AND ID_TEMA_AREA = wID_TEMA_AREA) THEN
            RETORNO := 15003;
            RETURN RETORNO;
        END IF;
        RETORNO := 200;
        RETURN RETORNO;
    END;
$$
LANGUAGE PLPGSQL;

--FUNCION PARA VALIDAR DATOS DE ACTUALIZACION DE LA TABLA TAB_PREGUNTA_TEMAS
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_PREGUNTA_TEMAS_UPDATE(wID_PREGUNTA TAB_PREGUNTA_TEMAS.ID_PREGUNTA%TYPE,
                                                            wID_TEMA_AREA TAB_PREGUNTA_TEMAS.ID_TEMA_AREA%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;

    BEGIN
        --VALIDAR QUE EL ID DE LA PREGUNTA EXISTA
        IF NOT EXISTS (SELECT ID_PREGUNTA FROM TAB_PREGUNTA WHERE ID_PREGUNTA = wID_PREGUNTA) THEN
            RETORNO := 15001;
            RETURN RETORNO;
        END IF;
        --VALIDAR QUE EL ID DEL TEMA EXISTA
        IF NOT EXISTS (SELECT ID_TEMA_AREA FROM TAB_TEMAS_AREAS WHERE ID_TEMA_AREA = wID_TEMA_AREA) THEN
            RETORNO := 15002;
            RETURN RETORNO;
        END IF;

        RETORNO := 200;
        RETURN RETORNO;
    END;
$$
LANGUAGE PLPGSQL;




--FUNCION PARA INSERTAR UNA PREGUNTA EN UN TEMA Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DE LA PREGUNTA Y EL TEMA
CREATE OR REPLACE FUNCTION FUN_INSERTAR_PREGUNTA_TEMAS_JSON(wID_PREGUNTA TAB_PREGUNTA_TEMAS.ID_PREGUNTA%TYPE,
                                                            wID_TEMA_AREA TAB_PREGUNTA_TEMAS.ID_TEMA_AREA%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_PREGUNTA_TEMAS(wID_PREGUNTA, wID_TEMA_AREA);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA PREGUNTA_TEMAS
            INSERT INTO TAB_PREGUNTA_TEMAS(ID_PREGUNTA, ID_TEMA_AREA)
            VALUES(wID_PREGUNTA, wID_TEMA_AREA);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',json_build_object('ID_PREGUNTA_TEMA',ULTIMOID));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA ACTUALIZAR UNA PREGUNTA EN UN TEMA Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DE LA PREGUNTA Y EL TEMA
CREATE OR REPLACE FUNCTION FUN_ACTUALIZAR_PREGUNTA_TEMAS(wID_PREGUNTA TAB_PREGUNTA_TEMAS.ID_PREGUNTA%TYPE,
                                                        wID_TEMA_AREA TAB_PREGUNTA_TEMAS.ID_TEMA_AREA%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A ACTUALIZAR
        wVALIDAR := FUN_VALIDAR_DATOS_PREGUNTA_TEMAS_UPDATE(wID_PREGUNTA, wID_TEMA_AREA);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --ACTUALIZACION DE LOS DATOS
            UPDATE TAB_PREGUNTA_TEMAS
            SET ID_TEMA_AREA = wID_TEMA_AREA
            WHERE  ID_PREGUNTA= wID_PREGUNTA;
            --VERIFICAR SI SE REALIZO LA ACTUALIZACION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1));
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;


