--FUNCIONES DE TRANSACCIONES E INSERCION DE LA TABLA TAB_PREGUNTA ------------------------------------------------------------------------------------------------------------
--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA PREGUNTA
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_PREGUNTA(wID_CONTEXTO TAB_PREGUNTA.ID_CONTEXTO%TYPE,
                            wENUNCIADO_PREGUNTA TAB_PREGUNTA.ENUNCIADO_PREGUNTA%TYPE,
                            wTIPO_PREGUNTA TAB_PREGUNTA.TIPO_PREGUNTA%TYPE,
                            wPUNTAJE_PREGUNTA TAB_PREGUNTA.PUNTAJE_PREGUNTA%TYPE,wAUTOR_PREGUNTA TAB_PREGUNTA.AUTOR_PREGUNTA%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO wID_CONTEXTO TIENE QUE SER MAYOR A 0 Y NO NULO
        IF wID_CONTEXTO <= 0 OR wID_CONTEXTO IS NULL THEN
            RETORNO := 8001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wCONTEXTO EXISTA
        ELSIF NOT EXISTS(SELECT 1 FROM TAB_CONTEXTO WHERE ID_CONTEXTO = wID_CONTEXTO) THEN
            RETORNO := 8002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wENUNCIADO_PREGUNTA TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wENUNCIADO_PREGUNTA) < 3 OR wENUNCIADO_PREGUNTA IS NULL THEN
            RETORNO := 8003;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wTIPO_PREGUNTA TIENE QUE SER MAYOR A 0 Y NO NULO
        ELSIF wTIPO_PREGUNTA <= 0 OR wTIPO_PREGUNTA IS NULL THEN
            RETORNO := 8004;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wPUNTAJE_PREGUNTA TIENE QUE SER MAYOR A 0 Y NO NULO
        ELSIF wPUNTAJE_PREGUNTA <= 0 OR wPUNTAJE_PREGUNTA IS NULL THEN
            RETORNO := 8005;
            RETURN RETORNO;
        --VALIDAR SI LA PREGUNTA YA EXISTE EN EL CONTEXTO
        --CONVERTIR EL ENUNCIADO A MAYUSCULAS
        ELSEIF EXISTS(SELECT 1 FROM TAB_PREGUNTA WHERE UPPER(ENUNCIADO_PREGUNTA) = UPPER(wENUNCIADO_PREGUNTA) AND ID_CONTEXTO = wID_CONTEXTO) THEN
            RETORNO := 8006;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wAUTOR_PREGUNTA TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wAUTOR_PREGUNTA) < 3 OR wAUTOR_PREGUNTA IS NULL THEN
            RETORNO := 8007;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;        
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA INSERTAR UNA PREGUNTA
CREATE OR REPLACE FUNCTION FUN_INSERTAR_PREGUNTA(wID_CONTEXTO TAB_PREGUNTA.ID_CONTEXTO%TYPE,
                            wENUNCIADO_PREGUNTA TAB_PREGUNTA.ENUNCIADO_PREGUNTA%TYPE,
                            wTIPO_PREGUNTA TAB_PREGUNTA.TIPO_PREGUNTA%TYPE,
                            wPUNTAJE_PREGUNTA TAB_PREGUNTA.PUNTAJE_PREGUNTA%TYPE,wAUTOR_PREGUNTA TAB_PREGUNTA.AUTOR_PREGUNTA%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_PREGUNTA(wID_CONTEXTO,wENUNCIADO_PREGUNTA,wTIPO_PREGUNTA,wPUNTAJE_PREGUNTA,wAUTOR_PREGUNTA);
        IF wVALIDAR <> 200 THEN
            RETORNO := wVALIDAR;
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA PREGUNTA
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_PREGUNTA','ID_PREGUNTA');
            INSERT INTO TAB_PREGUNTA(ID_PREGUNTA,ID_CONTEXTO,ENUNCIADO_PREGUNTA,TIPO_PREGUNTA,PUNTAJE_PREGUNTA,AUTOR_PREGUNTA)
            VALUES(ULTIMOID,wID_CONTEXTO,wENUNCIADO_PREGUNTA,wTIPO_PREGUNTA,wPUNTAJE_PREGUNTA,wAUTOR_PREGUNTA);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := 200;
                RETURN RETORNO;
            ELSE
                RETORNO := 1;
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA INSERTAR UNA PREGUNTA Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DE LA PREGUNTA
CREATE OR REPLACE FUNCTION FUN_INSERTAR_PREGUNTA_JSON(wID_CONTEXTO TAB_PREGUNTA.ID_CONTEXTO%TYPE,
                            wENUNCIADO_PREGUNTA TAB_PREGUNTA.ENUNCIADO_PREGUNTA%TYPE,
                            wTIPO_PREGUNTA TAB_PREGUNTA.TIPO_PREGUNTA%TYPE,
                            wPUNTAJE_PREGUNTA TAB_PREGUNTA.PUNTAJE_PREGUNTA%TYPE,wAUTOR_PREGUNTA TAB_PREGUNTA.AUTOR_PREGUNTA%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_PREGUNTA(wID_CONTEXTO,wENUNCIADO_PREGUNTA,wTIPO_PREGUNTA,wPUNTAJE_PREGUNTA,wAUTOR_PREGUNTA);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA PREGUNTA
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_PREGUNTA','ID_PREGUNTA');
            INSERT INTO TAB_PREGUNTA(ID_PREGUNTA,ID_CONTEXTO,ENUNCIADO_PREGUNTA,TIPO_PREGUNTA,PUNTAJE_PREGUNTA,AUTOR_PREGUNTA)
            VALUES(ULTIMOID,wID_CONTEXTO,wENUNCIADO_PREGUNTA,wTIPO_PREGUNTA,wPUNTAJE_PREGUNTA,wAUTOR_PREGUNTA);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',json_build_object('ID_PREGUNTA',ULTIMOID));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;



