--FUNCIONES DE TRANSACCIONES E INSERCION DE LA TABLA TAB_PREGUNTA ------------------------------------------------------------------------------------------------------------
--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA PREGUNTA
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_PREGUNTA(wID_CONTEXTO TAB_PREGUNTA.ID_CONTEXTO%TYPE,
                            wENUNCIADO_PREGUNTA TAB_PREGUNTA.ENUNCIADO_PREGUNTA%TYPE,
                            wTIPO_PREGUNTA TAB_PREGUNTA.TIPO_PREGUNTA%TYPE,
                            wPUNTAJE_PREGUNTA TAB_PREGUNTA.PUNTAJE_PREGUNTA%TYPE,
                            wAUTOR_PREGUNTA TAB_PREGUNTA.AUTOR_PREGUNTA%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO wID_CONTEXTO TIENE QUE SER MAYOR A 0 Y NO NULO
        IF wID_CONTEXTO <= 0 OR wID_CONTEXTO IS NULL THEN
            RETORNO := 8001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wCONTEXTO EXISTA
        ELSIF NOT EXISTS(SELECT 1 FROM TAB_CONTEXTO WHERE ID_CONTEXTO = wID_CONTEXTO) THEN
            RETORNO := 8002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wENUNCIADO_PREGUNTA TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        /*
        
        ELSIF LENGTH(wENUNCIADO_PREGUNTA) < 3 OR wENUNCIADO_PREGUNTA IS NULL THEN
            RETORNO := 8003;
            RETURN RETORNO;
        */
        --VALIDACION DEL PARAMETRO wTIPO_PREGUNTA TIENE QUE SER MAYOR A 0 Y NO NULO
        ELSIF wTIPO_PREGUNTA <= 0 OR wTIPO_PREGUNTA IS NULL THEN
            RETORNO := 8004;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wPUNTAJE_PREGUNTA TIENE QUE SER MAYOR A 0 Y NO NULO
        ELSIF wPUNTAJE_PREGUNTA <= 0 OR wPUNTAJE_PREGUNTA IS NULL THEN
            RETORNO := 8005;
            RETURN RETORNO;
        --VALIDAR SI LA PREGUNTA YA EXISTE EN EL CONTEXTO
        --CONVERTIR EL ENUNCIADO A MAYUSCULAS
        ELSEIF EXISTS(SELECT 1 FROM TAB_PREGUNTA WHERE UPPER(ENUNCIADO_PREGUNTA) = UPPER(wENUNCIADO_PREGUNTA) AND ID_CONTEXTO = wID_CONTEXTO) THEN
            RETORNO := 8006;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wAUTOR_PREGUNTA TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wAUTOR_PREGUNTA) < 3 OR wAUTOR_PREGUNTA IS NULL THEN
            RETORNO := 8007;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;        
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA PREGUNTA
CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_PREGUNTA_ACTUALIZACION(wID_PREGUNTA TAB_PREGUNTA.ID_PREGUNTA%TYPE, wID_CONTEXTO TAB_PREGUNTA.ID_CONTEXTO%TYPE,
                            wENUNCIADO_PREGUNTA TAB_PREGUNTA.ENUNCIADO_PREGUNTA%TYPE,
                            wTIPO_PREGUNTA TAB_PREGUNTA.TIPO_PREGUNTA%TYPE,
                            wPUNTAJE_PREGUNTA TAB_PREGUNTA.PUNTAJE_PREGUNTA%TYPE,wAUTOR_PREGUNTA TAB_PREGUNTA.AUTOR_PREGUNTA%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION SI EXISTE EL REGISTRO DE LA PREGUNTA
        IF NOT EXISTS(SELECT 1 FROM TAB_PREGUNTA WHERE ID_PREGUNTA = wID_PREGUNTA) THEN
            RETORNO := 8008;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wID_CONTEXTO TIENE QUE SER MAYOR A 0 Y NO NULO
        ELSIF wID_CONTEXTO <= 0 OR wID_CONTEXTO IS NULL THEN
            RETORNO := 8001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wCONTEXTO EXISTA
        ELSIF NOT EXISTS(SELECT 1 FROM TAB_CONTEXTO WHERE ID_CONTEXTO = wID_CONTEXTO) THEN
            RETORNO := 8002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wENUNCIADO_PREGUNTA TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        /*
        ELSIF LENGTH(wENUNCIADO_PREGUNTA) < 3 OR wENUNCIADO_PREGUNTA IS NULL THEN
            RETORNO := 8003;
            RETURN RETORNO;
        */
        --VALIDACION DEL PARAMETRO wTIPO_PREGUNTA TIENE QUE SER MAYOR A 0 Y NO NULO
        ELSIF wTIPO_PREGUNTA <= 0 OR wTIPO_PREGUNTA IS NULL THEN
            RETORNO := 8004;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wPUNTAJE_PREGUNTA TIENE QUE SER MAYOR A 0 Y NO NULO
        ELSIF wPUNTAJE_PREGUNTA <= 0 OR wPUNTAJE_PREGUNTA IS NULL THEN
            RETORNO := 8005;
            RETURN RETORNO;
        --VALIDAR SI LA PREGUNTA YA EXISTE EN EL CONTEXTO
        --CONVERTIR EL ENUNCIADO A MAYUSCULAS
        ELSEIF EXISTS(SELECT 1 FROM TAB_PREGUNTA WHERE UPPER(ENUNCIADO_PREGUNTA) = UPPER(wENUNCIADO_PREGUNTA) AND ID_CONTEXTO = wID_CONTEXTO AND ID_PREGUNTA <> wID_PREGUNTA) THEN
            RETORNO := 8006;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wAUTOR_PREGUNTA TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wAUTOR_PREGUNTA) < 3 OR wAUTOR_PREGUNTA IS NULL THEN
            RETORNO := 8007;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;        
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA INSERTAR UNA PREGUNTA
CREATE OR REPLACE FUNCTION FUN_INSERTAR_PREGUNTA(wID_CONTEXTO TAB_PREGUNTA.ID_CONTEXTO%TYPE,
                            wENUNCIADO_PREGUNTA TAB_PREGUNTA.ENUNCIADO_PREGUNTA%TYPE,
                            wTIPO_PREGUNTA TAB_PREGUNTA.TIPO_PREGUNTA%TYPE,
                            wPUNTAJE_PREGUNTA TAB_PREGUNTA.PUNTAJE_PREGUNTA%TYPE,wAUTOR_PREGUNTA TAB_PREGUNTA.AUTOR_PREGUNTA%TYPE,

                            wIMAGEN_PREGUNTA TAB_PREGUNTA.IMAGEN_PREGUNTA%TYPE, wTIPO_PREGUNTA_CONTENIDO TAB_PREGUNTA.TIPO_PREGUNTA_CONTENIDO%TYPE,
                            wLAYOUT_PREGUNTA TAB_PREGUNTA.LAYOUT_PREGUNTA%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_PREGUNTA(wID_CONTEXTO,wENUNCIADO_PREGUNTA,wTIPO_PREGUNTA,wPUNTAJE_PREGUNTA,wAUTOR_PREGUNTA);
        IF wVALIDAR <> 200 THEN
            RETORNO := wVALIDAR;
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA PREGUNTA
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_PREGUNTA','ID_PREGUNTA');
            INSERT INTO TAB_PREGUNTA(ID_PREGUNTA,ID_CONTEXTO,ENUNCIADO_PREGUNTA,TIPO_PREGUNTA,PUNTAJE_PREGUNTA,AUTOR_PREGUNTA,IMAGEN_PREGUNTA,TIPO_PREGUNTA_CONTENIDO,LAYOUT_PREGUNTA)
            VALUES(ULTIMOID,wID_CONTEXTO,wENUNCIADO_PREGUNTA,wTIPO_PREGUNTA,wPUNTAJE_PREGUNTA,wAUTOR_PREGUNTA,wIMAGEN_PREGUNTA,wTIPO_PREGUNTA_CONTENIDO,wLAYOUT_PREGUNTA);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := 200;
                RETURN RETORNO;
            ELSE
                RETORNO := 1;
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA INSERTAR UNA PREGUNTA Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DE LA PREGUNTA
CREATE OR REPLACE FUNCTION FUN_INSERTAR_PREGUNTA_JSON(wID_CONTEXTO TAB_PREGUNTA.ID_CONTEXTO%TYPE,
                            wENUNCIADO_PREGUNTA TAB_PREGUNTA.ENUNCIADO_PREGUNTA%TYPE,
                            wTIPO_PREGUNTA TAB_PREGUNTA.TIPO_PREGUNTA%TYPE,
                            wPUNTAJE_PREGUNTA TAB_PREGUNTA.PUNTAJE_PREGUNTA%TYPE,wAUTOR_PREGUNTA TAB_PREGUNTA.AUTOR_PREGUNTA%TYPE,
                            
                            wIMAGEN_PREGUNTA TAB_PREGUNTA.IMAGEN_PREGUNTA%TYPE, wTIPO_PREGUNTA_CONTENIDO TAB_PREGUNTA.TIPO_PREGUNTA_CONTENIDO%TYPE,
                            wLAYOUT_PREGUNTA TAB_PREGUNTA.LAYOUT_PREGUNTA%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_PREGUNTA(wID_CONTEXTO,wENUNCIADO_PREGUNTA,wTIPO_PREGUNTA,wPUNTAJE_PREGUNTA,wAUTOR_PREGUNTA);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA PREGUNTA
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_PREGUNTA','ID_PREGUNTA');
            INSERT INTO TAB_PREGUNTA(ID_PREGUNTA,ID_CONTEXTO,ENUNCIADO_PREGUNTA,TIPO_PREGUNTA,PUNTAJE_PREGUNTA,AUTOR_PREGUNTA,IMAGEN_PREGUNTA,TIPO_PREGUNTA_CONTENIDO,LAYOUT_PREGUNTA)
            VALUES(ULTIMOID,wID_CONTEXTO,wENUNCIADO_PREGUNTA,wTIPO_PREGUNTA,wPUNTAJE_PREGUNTA,wAUTOR_PREGUNTA,wIMAGEN_PREGUNTA,wTIPO_PREGUNTA_CONTENIDO,wLAYOUT_PREGUNTA);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',json_build_object('ID_PREGUNTA',ULTIMOID));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;








--FUNCION PARA CONSULTAR TODAS LAS PREGUNTAS Y RETORNAR EN FORMATO JSON
CREATE OR REPLACE FUNCTION FUN_CONSULTAR_PREGUNTAS() RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        REGISTROS JSON;
    BEGIN
        --CONSULTAR TODOS LOS REGISTROS DE LA TABLA PREGUNTA Y CONCATENAR LOS NOMBRES DEL √ÅREA Y DEL TEMA
        SELECT INTO REGISTROS json_agg(
            json_build_object(
                'ID_PREGUNTA', p.ID_PREGUNTA,
                'ID_CONTEXTO', p.ID_CONTEXTO,
                'ENUNCIADO_PREGUNTA', p.ENUNCIADO_PREGUNTA,
                'TIPO_PREGUNTA', p.TIPO_PREGUNTA,
                'PUNTAJE_PREGUNTA', p.PUNTAJE_PREGUNTA,
                'AUTOR_PREGUNTA', p.AUTOR_PREGUNTA,
                'ID_TEMA_AREA', ta.ID_TEMA_AREA,
                'NOMBRE_TEMA_AREA', ta.NOM_TEMA_AREA,
                'ID_AREA_EVALUAR', ae.ID_AREA_EVALUAR,
                'NOMBRE_AREA_EVALUAR', ae.NOM_AREA_EVALUAR,
                'IMAGEN_PREGUNTA', p.IMAGEN_PREGUNTA,
                'TIPO_PREGUNTA_CONTENIDO', p.TIPO_PREGUNTA_CONTENIDO,
                'LAYOUT_PREGUNTA', p.LAYOUT_PREGUNTA
            )
        )
        FROM TAB_PREGUNTA p
        INNER JOIN TAB_PREGUNTA_TEMAS pt ON p.ID_PREGUNTA = pt.ID_PREGUNTA
        INNER JOIN TAB_TEMAS_AREAS ta ON pt.ID_TEMA_AREA = ta.ID_TEMA_AREA
        INNER JOIN TAB_AREAS_EVALUAR ae ON ta.ID_AREA_EVALUAR=ae.ID_AREA_EVALUAR;


        


        --SI NO SE ENCUENTRAN REGISTROS
        IF REGISTROS IS NULL THEN
            RETORNO := json_build_object('CODIGO', 100, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 100));
            RETURN RETORNO;
        END IF;
        --RETORNAR LOS REGISTROS
        RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200), 'DATOS', REGISTROS);
        RETURN RETORNO;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA CONSULTAR UNA PREGUNTA POR ID Y RETORNAR EN FORMATO JSON
CREATE OR REPLACE FUNCTION FUN_CONSULTAR_PREGUNTA_ID(wID_PREGUNTA TAB_PREGUNTA.ID_PREGUNTA%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        REGISTRO JSON;
    BEGIN
        --CONSULTAR EL REGISTRO DE LA TABLA PREGUNTA
        SELECT INTO REGISTRO json_build_object(
                'ID_PREGUNTA', p.ID_PREGUNTA,
                'ID_CONTEXTO', p.ID_CONTEXTO,
                'ENUNCIADO_PREGUNTA', p.ENUNCIADO_PREGUNTA,
                'TIPO_PREGUNTA', p.TIPO_PREGUNTA,
                'PUNTAJE_PREGUNTA', p.PUNTAJE_PREGUNTA,
                'AUTOR_PREGUNTA', p.AUTOR_PREGUNTA,
                'ID_TEMA_AREA', ta.ID_TEMA_AREA,
                'NOMBRE_TEMA_AREA', ta.NOM_TEMA_AREA,
                'ID_AREA_EVALUAR', ae.ID_AREA_EVALUAR,
                'NOMBRE_AREA_EVALUAR', ae.NOM_AREA_EVALUAR,
                'IMAGEN_PREGUNTA', p.IMAGEN_PREGUNTA,
                'TIPO_PREGUNTA_CONTENIDO', p.TIPO_PREGUNTA_CONTENIDO,
                'LAYOUT_PREGUNTA', p.LAYOUT_PREGUNTA
            )
        FROM TAB_PREGUNTA p
        INNER JOIN TAB_PREGUNTA_TEMAS pt ON p.ID_PREGUNTA = pt.ID_PREGUNTA
        INNER JOIN TAB_TEMAS_AREAS ta ON pt.ID_TEMA_AREA = ta.ID_TEMA_AREA
        INNER JOIN TAB_AREAS_EVALUAR ae ON ta.ID_AREA_EVALUAR=ae.ID_AREA_EVALUAR
        WHERE p.ID_PREGUNTA = wID_PREGUNTA;
        --SI NO SE ENCUENTRAN REGISTROS
        IF REGISTRO IS NULL THEN
            RETORNO := json_build_object('CODIGO', 100, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 100));
            RETURN RETORNO;
        END IF;
        --RETORNAR LOS REGISTROS
        RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200), 'DATOS', REGISTRO);
        RETURN RETORNO;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA ACTUALIZAR UNA PREGUNTA
CREATE OR REPLACE FUNCTION FUN_ACTUALIZAR_PREGUNTA(
    wID_PREGUNTA TAB_PREGUNTA.ID_PREGUNTA%TYPE,
    wID_CONTEXTO TAB_PREGUNTA.ID_CONTEXTO%TYPE,
    wENUNCIADO_PREGUNTA TAB_PREGUNTA.ENUNCIADO_PREGUNTA%TYPE,
    wTIPO_PREGUNTA TAB_PREGUNTA.TIPO_PREGUNTA%TYPE,
    wPUNTAJE_PREGUNTA TAB_PREGUNTA.PUNTAJE_PREGUNTA%TYPE,
    wAUTOR_PREGUNTA TAB_PREGUNTA.AUTOR_PREGUNTA%TYPE,
    
    wIMAGEN_PREGUNTA TAB_PREGUNTA.IMAGEN_PREGUNTA%TYPE, 
    wTIPO_PREGUNTA_CONTENIDO TAB_PREGUNTA.TIPO_PREGUNTA_CONTENIDO%TYPE,
    wLAYOUT_PREGUNTA TAB_PREGUNTA.LAYOUT_PREGUNTA%TYPE
) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        VALIDACION INTEGER;
        DESCRIPCION_VALIDACION TEXT;
    BEGIN
        --VALIDAR LOS DATOS A ACTUALIZAR
        VALIDACION := FUN_VALIDAR_DATOS_PREGUNTA_ACTUALIZACION(wID_PREGUNTA,wID_CONTEXTO, wENUNCIADO_PREGUNTA, wTIPO_PREGUNTA, wPUNTAJE_PREGUNTA, wAUTOR_PREGUNTA);
        --OBTENER LA DESCRIPCION DEL CODIGO DE VALIDACION
        SELECT desc_mensaje INTO DESCRIPCION_VALIDACION FROM TAB_MENSAJES WHERE id_mensaje = VALIDACION;
        --SI LA VALIDACION ES CORRECTA ACTUALIZAR LOS DATOS
        IF VALIDACION = 200 THEN
            --ACTUALIZAR DATOS EN LA TABLA PREGUNTA
            UPDATE TAB_PREGUNTA 
            SET ID_CONTEXTO = wID_CONTEXTO, ENUNCIADO_PREGUNTA = wENUNCIADO_PREGUNTA, TIPO_PREGUNTA = wTIPO_PREGUNTA, PUNTAJE_PREGUNTA = wPUNTAJE_PREGUNTA, AUTOR_PREGUNTA = wAUTOR_PREGUNTA, IMAGEN_PREGUNTA = wIMAGEN_PREGUNTA, TIPO_PREGUNTA_CONTENIDO = wTIPO_PREGUNTA_CONTENIDO, LAYOUT_PREGUNTA = wLAYOUT_PREGUNTA 
            WHERE ID_PREGUNTA = wID_PREGUNTA;
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', DESCRIPCION_VALIDACION, 'DATOS', json_build_object('ID_PREGUNTA', wID_PREGUNTA));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1, 'MENSAJE', 'NO SE PUDO ACTUALIZAR EL REGISTRO, ASEG√öRESE QUE EL ID EXISTA');
                RETURN RETORNO;
            END IF;
        ELSE
            RETURN json_build_object('CODIGO', VALIDACION, 'MENSAJE', DESCRIPCION_VALIDACION);
        END IF;
    END;
$$
LANGUAGE plpgsql;

--FUNCION PARA ELIMINAR UNA PREGUNTA
CREATE OR REPLACE FUNCTION FUN_ELIMINAR_PREGUNTA(wID_PREGUNTA TAB_PREGUNTA.ID_PREGUNTA%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        DESCRIPCION_VALIDACION TEXT;
    BEGIN
        --VALIDAR SI EXISTE EL REGISTRO
        IF NOT EXISTS(SELECT 1 FROM TAB_PREGUNTA WHERE ID_PREGUNTA = wID_PREGUNTA) THEN
            RETORNO := json_build_object('CODIGO', 8009, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 8009));
            RETURN RETORNO;
        END IF;
        --VALIDAR SI EL REGISTRO TIENE DEPENDENCIAS
        IF EXISTS(SELECT 1 FROM TAB_PRUEBA_PREGUNTAS WHERE ID_PREGUNTA = wID_PREGUNTA) THEN
            RETORNO := json_build_object('CODIGO', 8010, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 8010));
            RETURN RETORNO;
        END IF;
        --VALIDAR SI EL REGISTRO TIENE DEPENDENCIAS
        /*
        IF EXISTS(SELECT 1 FROM TAB_PREGUNTA_TEMAS WHERE ID_PREGUNTA = wID_PREGUNTA) THEN
            RETORNO := json_build_object('CODIGO', 8011, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 8011));
            RETURN RETORNO;
        END IF;
        */
        --VALIDAR SI EL REGISTRO TIENE DEPENDENCIAS
        IF EXISTS(SELECT 1 FROM TAB_PRUEBA_RESPUESTAS_ESTUDIANTE WHERE ID_PREGUNTA = wID_PREGUNTA) THEN
            RETORNO := json_build_object('CODIGO', 8012, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 8012));
            RETURN RETORNO;
        END IF;
        --VALIDAR SI EL REGISTRO TIENE DEPENDENCIAS
        IF EXISTS(SELECT 1 FROM TAB_OPCIONES_PREGUNTA WHERE ID_PREGUNTA = wID_PREGUNTA) THEN
            RETORNO := json_build_object('CODIGO', 8013, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 8013));
            RETURN RETORNO;
        END IF;
        --ELIMINA TODOS LOS REGISTROS RELACIONADOS CON LA TABLA TAB_PREGUNTA_TEMAS
        DELETE FROM TAB_PREGUNTA_TEMAS WHERE ID_PREGUNTA = wID_PREGUNTA;
        --ELIMINAR DATOS EN LA TABLA PREGUNTA
        DELETE FROM TAB_PREGUNTA WHERE ID_PREGUNTA = wID_PREGUNTA;
        --VERIFICAR SI SE REALIZO LA ELIMINACION
        IF FOUND THEN
            RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', 'REGISTRO ELIMINADO EXITOSAMENTE', 'DATOS', json_build_object('ID_PREGUNTA', wID_PREGUNTA));
        ELSE
            RETORNO := json_build_object('CODIGO', 1, 'MENSAJE', 'NO SE PUDO ELIMINAR EL REGISTRO, ASEG√öRESE QUE EL ID EXISTA');
        END IF;
        RETURN RETORNO;
    END;
$$
LANGUAGE plpgsql;






--FUNCION QUE ME PERMITE OBTENER UNA PREGUNTA CON SU CONTEXTO Y SUS OPCIONES DE RESPUESTA EN FORMATO JSON
CREATE OR REPLACE FUNCTION FUN_CONSULTAR_CONTEXTO_PREGUNTA_OPCION_PREVIEW(wID_PREGUNTA TAB_PREGUNTA.ID_PREGUNTA%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        PREGUNTA JSON;
        OPCIONES JSON;
        CONTEXTO JSON;
    BEGIN
        --CONSULTAR EL REGISTRO DE LA TABLA PREGUNTA
        SELECT INTO PREGUNTA json_build_object(
                'ID_PREGUNTA', p.ID_PREGUNTA,
                'ID_CONTEXTO', p.ID_CONTEXTO,
                'ENUNCIADO_PREGUNTA', p.ENUNCIADO_PREGUNTA,
                'TIPO_PREGUNTA', p.TIPO_PREGUNTA,
                'PUNTAJE_PREGUNTA', p.PUNTAJE_PREGUNTA,
                'AUTOR_PREGUNTA', p.AUTOR_PREGUNTA,
                'ID_TEMA_AREA', ta.ID_TEMA_AREA,
                'NOMBRE_TEMA_AREA', ta.NOM_TEMA_AREA,
                'ID_AREA_EVALUAR', ae.ID_AREA_EVALUAR,
                'NOMBRE_AREA_EVALUAR', ae.NOM_AREA_EVALUAR,
                'IMAGEN_PREGUNTA', p.IMAGEN_PREGUNTA,
                'TIPO_PREGUNTA_CONTENIDO', p.TIPO_PREGUNTA_CONTENIDO,
                'LAYOUT_PREGUNTA', p.LAYOUT_PREGUNTA
            )
        FROM TAB_PREGUNTA p
        INNER JOIN TAB_PREGUNTA_TEMAS pt ON p.ID_PREGUNTA = pt.ID_PREGUNTA
        INNER JOIN TAB_TEMAS_AREAS ta ON pt.ID_TEMA_AREA = ta.ID_TEMA_AREA
        INNER JOIN TAB_AREAS_EVALUAR ae ON ta.ID_AREA_EVALUAR=ae.ID_AREA_EVALUAR
        WHERE p.ID_PREGUNTA = wID_PREGUNTA;
        --SI NO SE ENCUENTRAN REGISTROS
        IF PREGUNTA IS NULL THEN
            RETORNO := json_build_object('CODIGO', 100, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 100));
            RETURN RETORNO;
        END IF;
        --CONSULTAR LAS OPCIONES DE RESPUESTA DE LA PREGUNTA
        SELECT INTO OPCIONES json_agg(
            json_build_object(
                'ID_OPCION', o.ID_OPCION,
                'ID_PREGUNTA', o.ID_PREGUNTA,
                'DESCRIPCION_OPCION', o.TEXTO_OPCION,
                'ES_CORRECTA', o.ES_CORRECTA,
                'IMAGEN_OPCION', o.IMAGEN_OPCION,
                'TIPO_OPCION_CONTENIDO', o.TIPO_OPCION
            ) 
        )
        FROM TAB_OPCIONES_PREGUNTA o
        WHERE o.ID_PREGUNTA = wID_PREGUNTA;
        --SI NO SE ENCUENTRAN REGISTROS
        IF OPCIONES IS NULL THEN
            RETORNO := json_build_object('CODIGO', 100, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 100));
            RETURN RETORNO;
        END IF;
        --CONSULTAR EL CONTEXTO DE LA PREGUNTA
        SELECT INTO CONTEXTO json_build_object(
            'ID_CONTEXTO', c.ID_CONTEXTO,
            'NOMBRE_CONTEXTO', c.NOM_CONTEXTO,
            'DESCRIPCION_CONTEXTO', c.DESC_CONTEXTO,
            'ARCHIVO_CONTEXTO', c.LINK_MEDIA,
            'AUTOR_CONTEXTO', c.AUTOR_CONTEXTO,
            'TIPO_CONTEXTO', c.TIPO_CONTEXTO
        )
        FROM TAB_CONTEXTO c
        WHERE c.ID_CONTEXTO = (SELECT ID_CONTEXTO FROM TAB_PREGUNTA WHERE ID_PREGUNTA = wID_PREGUNTA);
        --SI NO SE ENCUENTRAN REGISTROS
        IF CONTEXTO IS NULL THEN
            RETORNO := json_build_object('CODIGO', 100, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 100));
            RETURN RETORNO;
        END IF;
        --RETORNAR LOS REGISTROS
        RETORNO := json_build_object('CODIGO', 200, 'MENSAJE', (SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200), 'DATOS',json_build_object('CONTEXTO',CONTEXTO,'PREGUNTA',PREGUNTA,'OPCIONES',OPCIONES));
        RETURN RETORNO;
    END;
$$
LANGUAGE plpgsql;



