--FUNCIONES TRANSACCIONALES Y DE INGRESO DE DATOS PARA LA TABLA TAB_INSTITUCION----------------------------------------------------------------------------------------------------------
--FUNCION PARA VALIDAR LOS DATOS A INSERTAR EN LA TABLA INSTITUCION

CREATE OR REPLACE FUNCTION FUN_VALIDAR_DATOS_INSTITUCION(wNOM_INSTITUCION TAB_INSTITUCION.NOM_INSTITUCION%TYPE,
                            wDIR_INSTITUCION TAB_INSTITUCION.DIR_INSTITUCION%TYPE,wNOM_REPRESENTANTE TAB_INSTITUCION.NOM_REPRESENTANTE%TYPE,
                            wTEL_INSTITUCION TAB_INSTITUCION.TEL_INSTITUCION%TYPE,wEMAIL_INSTITUCION TAB_INSTITUCION.EMAIL_INSTITUCION%TYPE,
                            wid_ciudad TAB_INSTITUCION.id_ciudad%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
    BEGIN
        --VALIDACION DEL PARAMETRO wNOM_INSTITUCION TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        IF LENGTH(wNOM_INSTITUCION) < 3 OR wNOM_INSTITUCION IS NULL THEN
            RETORNO := 6001;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wDIR_INSTITUCION TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wDIR_INSTITUCION) < 3 OR wDIR_INSTITUCION IS NULL THEN
            RETORNO := 6002;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wNOM_REPRESENTANTE TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO
        ELSIF LENGTH(wNOM_REPRESENTANTE) < 3 OR wNOM_REPRESENTANTE IS NULL THEN
            RETORNO := 6003;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wTEL_INSTITUCION SOLO CONTIENE NUMEROS
        ELSIF NOT wTEL_INSTITUCION ~ '^[0-9]+$' THEN
            RETORNO := 6004;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wTEL_INSTITUCION TIENE QUE SER MAYOR A 3000000000 Y MENOR QUE 4000000000 CARACTERES Y NO NULO 
        ELSIF CAST(wTEL_INSTITUCION AS BIGINT) < 3000000000 OR CAST(wTEL_INSTITUCION AS BIGINT) >= 4000000000 OR wTEL_INSTITUCION IS NULL THEN
            RETORNO := 6005;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wEMAIL_INSTITUCION TIENE QUE SER MAYOR A 3 CARACTERES Y NO NULO Y TIENE QUE CONTENER @
        ELSIF LENGTH(wEMAIL_INSTITUCION) < 3 OR wEMAIL_INSTITUCION IS NULL OR NOT wEMAIL_INSTITUCION ~ '@' THEN
            RETORNO := 6006;
            RETURN RETORNO;
        --VALIDACION DEL PARAMETRO wid_ciudad TIENE QUE SER MAYOR A 0
        ELSIF CAST(wid_ciudad AS INTEGER) < 1 THEN
            RETORNO := 6007;
            RETURN RETORNO;
        --EVALUAR SI LA INSTITUCION YA EXISTE
        --CONVERTIR EL NOMBRE A MAYUSCULAS
        ELSEIF EXISTS(SELECT * FROM TAB_INSTITUCION WHERE UPPER(NOM_INSTITUCION) = UPPER(wNOM_INSTITUCION)) THEN
            RETORNO := 6008;
            RETURN RETORNO;
        --VALIDAR DE QUE LA CIUDAD EXISTA
        ELSEIF NOT EXISTS(SELECT * FROM TAB_CIUDADES WHERE ID_CIUDAD = wid_ciudad) THEN
            RETORNO := 6009;
            RETURN RETORNO;
        ELSE
            RETORNO := 200;
            RETURN RETORNO;
        END IF;
    END;
$$
LANGUAGE plpgsql;



--FUNCION PARA INSERTAR DATOS EN LA TABLA INSTITUCION
CREATE OR REPLACE FUNCTION FUN_INSERTAR_INSTITUCION(wNOM_INSTITUCION TAB_INSTITUCION.NOM_INSTITUCION%TYPE,
                            wDIR_INSTITUCION TAB_INSTITUCION.DIR_INSTITUCION%TYPE,wNOM_REPRESENTANTE TAB_INSTITUCION.NOM_REPRESENTANTE%TYPE,
                            wTEL_INSTITUCION TAB_INSTITUCION.TEL_INSTITUCION%TYPE,wEMAIL_INSTITUCION TAB_INSTITUCION.EMAIL_INSTITUCION%TYPE,
                            wid_ciudad TAB_INSTITUCION.id_ciudad%TYPE) RETURNS INTEGER AS
$$
    DECLARE
        RETORNO INTEGER;
        VALIDACION INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDAR LOS DATOS A INSERTAR
        VALIDACION := FUN_VALIDAR_DATOS_INSTITUCION(wNOM_INSTITUCION,wDIR_INSTITUCION,wNOM_REPRESENTANTE,wTEL_INSTITUCION,wEMAIL_INSTITUCION,wid_ciudad);
        --SI LA VALIDACION ES CORRECTA INSERTAR LOS DATOS
        IF VALIDACION = 200 THEN
            --GENERAR ID AUTOINCREMENTABLE USANDO LA FUNCION funcion_Retorna_ultmoid
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_INSTITUCION','ID_INSTITUCION');
            --CONVERTIR EL NOMBRE A MAYUSCULAS
            wNOM_INSTITUCION := UPPER(wNOM_INSTITUCION);
            --INSERTAR DATOS EN LA TABLA INSTITUCION
            INSERT INTO TAB_INSTITUCION VALUES(ULTIMOID,wNOM_INSTITUCION,wDIR_INSTITUCION,wNOM_REPRESENTANTE,wTEL_INSTITUCION,wEMAIL_INSTITUCION,wid_ciudad);
            IF FOUND THEN
                RETORNO := 200;
                RETURN RETORNO;
            ELSE
                RETORNO := 1;
                RETURN RETORNO;
            END IF;
        ELSE
            RETURN VALIDACION;
        END IF;
    END;
$$
LANGUAGE plpgsql;


--FUNCION PARA INSERTAR UNA INSTITUCION Y QUE RETORNE UN JSON CON EL RESULTADO, MENSAJE Y ID DE LA INSTITUCION
CREATE OR REPLACE FUNCTION FUN_INSERTAR_INSTITUCION_JSON(wNOM_INSTITUCION TAB_INSTITUCION.NOM_INSTITUCION%TYPE,
                            wDIR_INSTITUCION TAB_INSTITUCION.DIR_INSTITUCION%TYPE,wNOM_REPRESENTANTE TAB_INSTITUCION.NOM_REPRESENTANTE%TYPE,
                            wTEL_INSTITUCION TAB_INSTITUCION.TEL_INSTITUCION%TYPE,wEMAIL_INSTITUCION TAB_INSTITUCION.EMAIL_INSTITUCION%TYPE,
                            wid_ciudad TAB_INSTITUCION.id_ciudad%TYPE) RETURNS JSON AS
$$
    DECLARE
        RETORNO JSON;
        wVALIDAR INTEGER;
        ULTIMOID INTEGER;
    BEGIN
        --VALIDACION DE LOS DATOS A INSERTAR
        wVALIDAR := FUN_VALIDAR_DATOS_INSTITUCION(wNOM_INSTITUCION, wDIR_INSTITUCION, wNOM_REPRESENTANTE, wTEL_INSTITUCION, wEMAIL_INSTITUCION, wid_ciudad);
        IF wVALIDAR <> 200 THEN
            RETORNO := json_build_object('CODIGO',wVALIDAR,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = wVALIDAR));
            RETURN RETORNO;
        ELSE
            --INSERCION DE LOS DATOS
            --OBTENER EL ULTIMO ID DE LA TABLA INSTITUCION
            SELECT INTO ULTIMOID funcion_Retorna_ultmoid('TAB_INSTITUCION','ID_INSTITUCION');
            INSERT INTO TAB_INSTITUCION(ID_INSTITUCION, NOM_INSTITUCION, DIR_INSTITUCION, NOM_REPRESENTANTE, TEL_INSTITUCION, EMAIL_INSTITUCION, id_ciudad)
            VALUES(ULTIMOID, wNOM_INSTITUCION, wDIR_INSTITUCION, wNOM_REPRESENTANTE, wTEL_INSTITUCION, wEMAIL_INSTITUCION, wid_ciudad);
            --VERIFICAR SI SE REALIZO LA INSERCION
            IF FOUND THEN
                RETORNO := json_build_object('CODIGO',200,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 200),'DATOS',json_build_object('ID_INSTITUCION',ULTIMOID));
                RETURN RETORNO;
            ELSE
                RETORNO := json_build_object('CODIGO', 1,'MENSAJE',(SELECT desc_mensaje FROM TAB_MENSAJES WHERE id_mensaje = 1)); 
                RETURN RETORNO;
            END IF;
        END IF;
    END;
$$
LANGUAGE plpgsql;